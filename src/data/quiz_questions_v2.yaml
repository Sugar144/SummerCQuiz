weeks:
  - number: 1
    explanation: |
      Explicación de semana 1
    levels:
      ## Declaración, inicialización y asignación de variables y constantes
      - number: 1
        explanation:
          C: |-
            ## Constantes con `#define` (preprocesador)
            Se usan para definir valores constantes globales sin tipo.  
            Son sustituidas por su valor antes de compilar y no ocupan memoria.  
            No llevan `;` al final.

            ```c
            #define MAX_JUGADORES 4
            #define PUNTOS_VICTORIA 1000
            ```

            ## Constantes locales con `const` (con tipo)
            Se definen dentro de una función, con tipo y valor inicial.  
            Deben inicializarse al declararlas.

            ```c
            const float VELOCIDAD_JUGADOR = 5.5;
            const int VIDAS_INICIALES = 3;
            ```

            ## Declaración de variables
            Cada tipo tiene su palabra clave:
            - `int` → enteros
            - `float` → decimales
            - `bool` → booleanos (requiere `#include <stdbool.h>`)
            - `char` → caracteres individuales
            - `char[]` → cadenas de caracteres con tamaño fijo

            ```c
            int puntuacion;
            float energia;
            bool nivelCompletado;
            char inicialJugador;
            char nombreJugador[30];
            ```

            También puedes **declarar un `char[]` con datos iniciales** usando comillas dobles:

            ```c
            char nombreJugador[30] = "Zelda";
            ```

            ## Inicialización y asignación
            Puedes **inicializar al declarar**:

            ```c
            int puntuacion = 500;
            float energia = VELOCIDAD_JUGADOR;
            char inicialJugador = 'L';
            ```

            O **declarar primero y asignar después**:

            ```c
            int puntuacion;
            puntuacion = 500;

            float energia;
            energia = VELOCIDAD_JUGADOR;

            char inicialJugador;
            inicialJugador = 'L';
            ```

          Pseudocode: |-
            ## Constantes
            Las constantes se definen en un bloque `const ... end const`, indicando tipo y valor.  
            Se usan para valores que no cambian durante la partida.

            ```text
            const
              MAX_JUGADORES: integer = 4;
              PUNTOS_VICTORIA: integer = 1000;
              VELOCIDAD_JUGADOR: real = 5.5;
              VIDAS_INICIALES: integer = 3;
            end const
            ```

            ## Variables
            Se declaran en un bloque `var ... end var` dentro del algoritmo principal, indicando su tipo.  
            No se pueden inicializar en la misma línea que la declaración.

            ```text
            var
              puntuacion: integer;
              energia: real;
              nivelCompletado: boolean;
              inicialJugador: character;
              nombreJugador: string;
            end var
            ```

            ## Asignación de valores
            Una vez declaradas, se asigna el valor con `:=`.  
            Para usar una constante, simplemente escribe su nombre.

            ```text
            puntuacion := 500;
            energia := VELOCIDAD_JUGADOR;
            nivelCompletado := false;
            inicialJugador := 'L';
            nombreJugador := "Zelda";
            ```

            ## Tipos básicos
            - `integer` → enteros
            - `real` → decimales
            - `boolean` → valores `true` o `false`
            - `character` → un solo carácter `'A'`
            - `string` → cadenas de texto
        
        

        questions:
          - id: c-1-max_nombre
            language: C
            week: 1
            prompt: Usando la directiva define, declara una constante para el máximo de un nombre "MAX_NOMBRE" con el valor entero 20.
            answer: '#define MAX_NOMBRE 20'
            hint:

          - id: c-1-max_drones
            language: Pseudocode
            week: 1
            prompt: Declara una constante para el máximo de drones "MAX_DRONES" con el valor entero 5.
            answer: '#define MAX_DRONES 5'
            hint:

          - id: p-1-max_drones
            language: Pseudocode
            week: 1
            prompt: Declara una constante para el máximo de drones "MAX_DRONES" con el valor entero 5.
            answer: |-
              const
                  MAX_DRONES: integer = 5;
              end const
            hint:

          - id: c-1-const_decimal
            language: C
            week: 1
            prompt: Declara una constante local de tipo decimal para la distancia mínima "DISTANCIA_MINIMA", asignale el valor 250.0.
            answer: |
              int main(){
                const float DISTANCIA_MINIMA = 250.0;
                return 0;
              }
            hint: Las constantes locales comienzan por const.

          - id: p-1-const_decimal
            language: Pseudocode
            week: 1
            prompt: Declara una constante de tipo decimal para la distancia mínima "DISTANCIA_MINIMA", asignale el valor 250.0.
            answer: |-
              const
                DISTANCIA_MINIMA: real = 250.0;
              end const
            hint: No olvides las palabras reservadas const end const y ;

          - id: c-1-const_entera
            language: C
            week: 1
            prompt: Declara una constante local de tipo entera para el puntaje inicial INITIAL_SCORE, asignale el valor 0.
            answer: |
              int main(){
                const int INITIAL_SCORE = 0;
                return 0;
              }
            hint: Las constantes locales comienzan por const.

          - id: p-1-const_entera
            language: C
            week: 1
            prompt: Declara una constante local de tipo entera para el puntaje inicial INITIAL_SCORE, asignale el valor 0.
            answer: |
              const
                INITIAL_SCORE: integer = 0;
              end const
            hint: No olvides las palabras reservadas const end const y ;

          - id: c-1-nombredron_20
            language: C
            week: 1
            prompt: Declara una cadena de caracteres llamada nombreDron con tamaño 20.
            answer: |
              int main(){
                char nombreDron[20];
                return 0;
              }
            hint:

          - id: p-1-nombredron_string
            language: Pseudocode
            week: 1
            prompt: Declara una variable de tipo string llamada nombreDron.
            answer: |-
              algorithm
                var
                  nombreDron: string;
                end var
              end algorithm
            hint: Recuerda las palabras reservadas var end var.

          - id: c-1-nombredron_max_nombre
            language: C
            week: 1
            prompt: Declara una cadena de caracteres llamada nombreDron con tamaño 20, pero esta vez utiliza la constante "MAX_NOMBRE".
            answer: |
              int main(){
                char nombreDron[MAX_NOMBRE];
                return 0;
              }
            hint:


          - id: c-1-iddron_entera
            language: C
            week: 1
            prompt: Declara una variable entera para almacenar el identificador del dron, llamala idDron.
            answer: |
              int main(){
                int idDron;
                return 0;
              }
            hint:

          - id: p-1-iddron_entera
            language: Pseudocode
            week: 1
            prompt: Declara una variable entera para almacenar el identificador del dron, llamala idDron.
            answer: |-
              algorithm
                var 
                  idDron: integer; 
                end var
              end algorithm
            hint:

          - id: c-1-bateriainicial_float
            language: C
            week: 1
            prompt: Declara una variable decimal para la batería inicial del dron, llamala bateriaInicial.
            answer: |
              int main(){
                float bateriaInicial;
                return 0;
              }

            hint:

          - id: p-1-bateriainicial_real
            language: Pseudocode
            week: 1
            prompt: Declara una variable decimal para la batería inicial del dron, llamala bateriaInicial.
            answer: |-
              algorithm
                var 
                  bateriaInicial: real; 
                end var
              end algorithm
            hint:

          - id: c-1-iddron_menos1
            language: C
            week: 1
            prompt: Inicializa la variable idDron en -1.
            answer: |
              int main(){
                idDron = -1;
                return 0;
              }
            hint:

          - id: p-1-iddron_menos1
            language: Pseudocode
            week: 1
            prompt: Inicializa la variable idDron en -1.
            answer: |
              algorithm
                idDron := -1;
              end algorithm
            hint: El operador de asignación en pseudocódigo es diferente al de C.

          - id: c-1-distanciaminima_const
            language: C
            week: 1
            prompt: Declara una variable llamada distanciaMinima e inicializala con la constante "DISTANCIA_MINIMA".
            answer: |-
              int main(){
                float distanciaMinima = DISTANCIA_MINIMA;
                return 0;
              }
            hint:

          - id: p-1-distanciaminima_const
            language: Pseudocode
            week: 1
            prompt: Declara una variable llamada distanciaMinima e inicializala con la constante "DISTANCIA_MINIMA".
            answer: |-
              algorithm
                var
                  distanciaMinima: real;
                end var

                distanciaMinima:= DISTANCIA_MINIMA;

              end algorithm
            hint: Aquí es importante recordar que en pseudocódigo no es posible declarar e inicializar a la vez, primero declara y luego asignale el valor, no olvides las palabras reservadas var end var.

          - id: c-1-dronactivo_true
            language: C
            week: 1
            prompt: Declara una variable booleana llamada dronActivo e inicialízala a true en la misma linea.
            answer: |
              int main(){
                bool dronActivo = true;
                return 0;
              }
            hint:

          - id: p-1-dronactivo_true
            language: Pseudocode
            week: 1
            prompt: Declara una variable booleana llamada dronActivo e inicialízala a true.
            answer: |-
              algorithm
                var 
                  dronActivo: boolean; 
                end var 

                dronActivo := true;
              
              end algorithm
            hint: Recuerda, primero declara (var end var) y luego inicializa.

          - id: c-1-categoriadron_a
            language: C
            week: 1
            prompt: Declara e inicializa una variable char llamada categoriaDron a "A" en la misma linea.
            answer: |
              int main(){
                char categoriaDron = 'A';
                return 0;
              }

            hint: Los caracteres se inicializan entre ''.

          - id: p-1-categoriadron_a
            language: Pseudocode
            week: 1
            prompt: Declara e inicializa una variable char llamada categoriaDron a "A".
            answer: |-
              algorithm
                var
                  categoriaDron: character;
                end var

                categoriaDron := 'A'
              end algorithm
            hint: Recuerda, primero declara y luego inicializa. Los caracteres se inicializan entre ''.

      # Entrada y salida
      - number: 2
        explanation:
          C: |-
            ## Lectura de datos con `scanf`
            Se usa para leer información introducida por el jugador.  
            En variables simples (`int`, `float`, `char`) se pasa la dirección con `&`.  
            En cadenas (`char[]`), no se usa `&` porque ya son punteros.

            ```c
            char nombreJugador[30];
            int nivel;
            float energia;
            char teclaAccion;

            scanf("%s", nombreJugador); // cadena
            scanf("%d", &nivel);        // entero
            scanf("%f", &energia);      // decimal
            scanf(" %c", &teclaAccion); // carácter
            ```

            También puedes leer datos sobre un string que **ya tiene un valor inicial**:  
            Esto reemplazará el contenido anterior.

            ```c
            char nombreJugador[30] = "Jugador1";
            printf("Introduce nuevo nombre: ");
            scanf("%s", nombreJugador);
            ```

            ## Formatos comunes en `scanf`
            - `%s` → cadenas
            - `%d` → enteros
            - `%f` → decimales
            - `%c` → caracteres

            ---

            ## Escritura de datos con `printf`
            Permite mostrar información de la partida en pantalla.

            ```c
            char nombreJugador[30] = "Mario";
            int nivel = 2;
            float energia = 75.5;
            char teclaAccion = 'A';

            printf("Jugador: %s\n", nombreJugador);
            printf("Nivel: %d\n", nivel);
            printf("Energía: %.1f%%\n", energia);
            printf("Tecla de acción: %c\n", teclaAccion);
            ```

            ## Formatos comunes en `printf`
            - `%s` → cadenas
            - `%d` → enteros
            - `%f` → decimales
            - `%.1f` → decimales con 1 cifra
            - `%c` → caracteres

            **Notas**
            - `scanf` → usar `&` para variables simples, no para cadenas.
            - `printf` → el tipo y orden deben coincidir con los especificadores.

          Pseudocode: |-
            ## Lectura de datos
            Cada tipo de dato tiene su función de lectura `readTipo()`.  
            Devuelven un valor que debes asignar a una variable con `:=`.
            
            ```text
            var
              nombreJugador: string;
              nivel: integer;
              energia: real;
              teclaAccion: character;
              modoCoop: boolean;
            end var
            
            nombreJugador := readString();
            nivel := readInteger();
            energia := readReal();
            teclaAccion := readCharacter();
            modoCoop := readBoolean();
            ```
            
            También puedes leer sobre un string que ya tenga valor inicial (se reemplaza el contenido):
            
            ```text
            var
              nombreJugador: string;
            end var
            
            nombreJugador := "Jugador1";
            nombreJugador := readString();
            ```
            
            **Funciones más comunes**
            - `readString()` → cadenas  
            - `readInteger()` → enteros  
            - `readReal()` → decimales  
            - `readCharacter()` → caracteres  
            - `readBoolean()` → booleanos (`true` / `false`)
            
            ---
            
            ## Escritura de datos
            Cada tipo de dato tiene su función `writeTipo(valor)`.  
            No se pueden imprimir varios datos en la misma llamada; usa varias llamadas seguidas.
            
            ```text
            writeString("Jugador: ");
            writeString(nombreJugador);
            
            writeString(", Nivel: ");
            writeInteger(nivel);
            
            writeString(", Energía: ");
            writeReal(energia);
            
            writeString(", Tecla de acción: ");
            writeCharacter(teclaAccion);
            
            writeString(", Modo cooperativo: ");
            writeBoolean(modoCoop);
            ```
            
            **Funciones más comunes**
            - `writeString(valor)` → cadenas  
            - `writeInteger(valor)` → enteros  
            - `writeReal(valor)` → decimales  
            - `writeCharacter(valor)` → caracteres  
            - `writeBoolean(valor)` → booleanos
            
            **Notas**
            - Cada `write...` imprime un único dato o texto.
            - Los booleanos se representan como `true` o `false`.
            - El orden de las llamadas determina el orden en pantalla.
        
        

        questions:
          - id: c-1-scanf_nombredron
            language: C
            week: 1
            prompt: Lee el nombre del dron desde teclado usando scanf y guardalo en nombreDron.
            answer: |
              int main(){
                scanf("%s", nombreDron);
                return 0;
              }

            hint: El especificador de formato de string es %s.

          - id: p-1-readstring_nombredron
            language: Pseudocode
            week: 1
            prompt: Lee el nombre del dron desde teclado y guardalo en nombreDron.
            answer: |
              algorithm
                nombreDron := readString();
              end algorithm
            hint: Recuerda que cada tipo tiene una función de lectura que comienza por read. El formato es similar al de una inicialización.

          - id: c-1-scanf_iddron
            language: C
            week: 1
            prompt: Lee el identificador del dron desde teclado usando scanf y guardalo en idDron.
            answer: |
              int main(){
                scanf("%d", &idDron);
                return 0;
              }

            hint: El especificador de formato de integer es %d.

          - id: p-1-readinteger_iddron
            language: Pseudocode
            week: 1
            prompt: Lee el identificador del dron desde teclado y guardalo en idDron.
            answer: |
              algorithm
                idDron := readInteger();
              end algorithm

            hint: Recuerda que cada tipo tiene una función de lectura que comienza por read. El formato es similar al de una inicialización.

          - id: c-1-scanf_bateriai
            language: C
            week: 1
            prompt: Lee el valor de la batería inicial desde teclado usando scanf y guárdalo en bateriaInicial.
            answer: |
              int main(){
                scanf("%f", &bateriaInicial);
                return 0;
              }

            hint: El especificador de formato de float es %f.

          - id: p-1-readreal_bateriai
            language: Pseudocode
            week: 1
            prompt: Lee el valor de la batería inicial desde teclado y guárdalo en bateriaInicial.
            answer: |
              algorithm
                bateriaInicial := readReal();
              end algorithm

            hint: Recuerda que cada tipo tiene una función de lectura que comienza por read. El formato es similar al de una inicialización.

          - id: c-1-scanf_categoriadron
            language: C
            week: 1
            prompt: Lee un carácter del usuario desde teclado usando scanf y guárdalo en categoriaDron.
            answer: |
              int main(){
                scanf(" %c", &categoriaDron);
                return 0;
              }

            hint: El especificador de formato de char es %c.

          - id: p-1-readcharacter_categoriadron
            language: Pseudocode
            week: 1
            prompt: Lee un character del usuario desde teclado y guárdalo en categoriaDron.
            answer: |
              algorithm
                categoriaDron := readCharacter();
              end algorithm

            hint: Recuerda que cada tipo tiene una función de lectura que comienza por read. El formato es similar al de una inicialización.

          - id: c-1-printf_nombre_id
            language: C
            week: 1
            prompt: 'Imprime el nombre del dron y su identificador. Usa "Dron: x, ID: x" para la impresión, siendo "x" el especificador de formato.'
            answer: |
              int main(){
                printf("Dron: %s, ID: %d", nombreDron, idDron);
                return 0;
              }

            hint: 'Ejemplo de ejecución: "Dron: dron001, ID: 1"'

          - id: p-1-writestring_nombre_id
            language: Pseudocode
            week: 1
            prompt: 'Imprime el nombre del dron y su identificador. Usa "Dron: x, ID: x" para la impresión, siendo "x" el valor pertinente.'
            answer: |-
              algorithm
                writeString("Dron: "); 
                writeString(nombreDron); 
                writeString(", ID: "); 
                writeInteger(idDron);'
              end algorithm
            hint: 'Ejemplo de ejecución: "Dron: dron001, ID: 1". Recuerda que en pseudocódigo no puedes imprimir mas de un dato por linea.'

          - id: c-1-printf_bateria
            language: C
            week: 1
            prompt: 'Imprime la batería inicial del dron con un decimal. Usa "Batería: x" para la impresión, siendo "x" el especificador de formato.'
            answer: |
              int main(){
                printf("Batería: %.1f", bateriaInicial);
                return 0;
              }

            hint: Para imprimir cierto numero de decimales utiliza %.xf, siendo x el numero de decimales.

          - id: p-1-writestring_bateria
            language: Pseudocode
            week: 1
            prompt: 'Imprime la batería inicial del dron. Usa "Batería: x" para la impresión, siendo "x" el valor pertinente.'
            answer: |-
              algorithm
                writeString("Batería: ");
                writeReal(bateriaInicial);
              end algorithm
            hint:

          - id: c-1-printf_categoria
            language: C
            week: 1
            prompt: 'Imprime la categoría del dron como carácter. Usa "Categoría: x" para la impresión, siendo "x" el especificador de formato.'
            answer: |
              int main(){
                printf("Categoría: %c", categoriaDron);
                return 0;
              }

            hint:

          - id: p-1-writestring_categoria
            language: Pseudocode
            week: 1
            prompt: 'Imprime la categoría del dron como carácter. Usa "Categoría: x" para la impresión, siendo "x" el valor pertinente.'
            answer: |-
              algorithm
                writeString("Categoría: ");
                writeCharacter(categoriaDron);
              end algorithm
            hint:


      - number: 3
        explanation:
          C: |-
            ## Enumerativos (enum)
            Un `enum` define un conjunto finito de etiquetas con valores enteros subyacentes (normalmente `int` empezando en 0).  
            Útil para estados del juego con nombres legibles en vez de números.

            ```c
            // Definición y uso
            typedef enum {
              IDLE, ATACANDO, KO
            } tEstadoJugador;

            tEstadoJugador estado = ATACANDO;   // inicialización
            // Lectura como entero sin signo
            scanf("%u", &estado);   // %u es el especificador que usaremos para enumerativos

            // Impresión del valor numérico
            printf("Estado (0=IDLE,1=ATACANDO,2=KO): %u\n", estado);
            ```

            ## Operadores aritméticos y compuestos
            Los básicos son `+ - * / %`.  
            Los compuestos combinan operación y asignación: `+= -= *= /= %=`.  
            `++` y `--` incrementan/decrementan en 1 (no existen en pseudocódigo).

            ```c
            int puntuacion = 900;
            puntuacion += 50;    // 950
            int vidas = 3;
            vidas--;             // 2
            float energia = 87.5f;
            energia -= 12.5f;    // 75.0
            ```

            ## Relacionales y lógicos (expresiones booleanas)
            Comparaciones: `== != < <= > >=` devuelven `bool`.  
            Lógicos: `&&` (AND), `||` (OR), `!` (NOT). Usa paréntesis para claridad.

            ```c
            #include <stdbool.h>
            bool activo = true;
            bool averiado = false;
            float bateria = 22.0f;

            bool suficiente = (bateria >= 20.0f);          // true
            bool enServicio = activo && !averiado;         // true
            bool puedeJugar = suficiente && (vidas > 0);   // depende de 'vidas'
            ```

            ## Operador ternario `?:`
            Selecciona entre dos expresiones según una condición.  
            Ideal para decidir mensajes cortos o valores simples.

            ```c
            bool enServicio = true;
            printf("%s\n", enServicio ? "En servicio" : "Fuera de servicio");

            int bonus = (puntuacion >= 1000) ? 100 : 0;
            ```

            ## Conversiones (casts)
            Un *cast* fuerza la conversión de tipo.  
            Ten presente si es *widening* (pérdida improbable) o *narrowing* (puede truncar).

            ```c
            float energia = 73.8f;
            int energiaEntera = (int)energia;    // 73 (trunca)
            int vidas = 2;
            float vidasF = (float)vidas;         // 2.0 (amplía)
            ```

          Pseudocode: |-
            ## Enumerativos
            Un tipo enumerativo define un conjunto limitado de etiquetas que representan valores enteros.  
            En pseudocódigo se definen con `type` y `end type`.

            ```pseudocode
            type
              tEstadoJugador = { IDLE, ATACANDO, KO }
            end type

            var
              estado: tEstadoJugador;
            end var

            estado := ATACANDO;
            estado := readEnum();  { lee el valor de teclado }
            writeString("Estado actual: ");
            writeEnum(estado);
            ```

            ## Operadores aritméticos y compuestos
            Los operadores básicos son `+ - * / %`.  
            Los compuestos no existen, pero puedes simularlos reescribiendo la variable.  
            El incremento y decremento se hacen sumando o restando 1.

            ```pseudocode
            var
              puntuacion: integer;
              vidas: integer;
              energia: real;
            end var

            puntuacion := puntuacion + 50;
            vidas := vidas - 1;
            energia := energia - 12.5;
            ```

            ## Operadores relacionales y lógicos
            Comparaciones: `=`, `≠`, `<`, `≤`, `>`, `≥` devuelven booleanos.  
            Lógicos: `y` (AND), `o` (OR), `no` (NOT).

            ```pseudocode
            var
              activo: boolean;
              averiado: boolean;
              bateria: real;
              suficiente: boolean;
              puedeJugar: boolean;
            end var

            suficiente := bateria ≥ 20.0;
            puedeJugar := suficiente y (vidas > 0);
            activo := no averiado;
            writeBoolean(suficiente);
            ```

            ## Operador ternario
            En pseudocódigo **no existe** el operador ternario `?:`.  
            En su lugar, se usa una estructura condicional.

            ```pseudocode
            if activo then
              writeString("En servicio");
            else
              writeString("Fuera de servicio");
            end if
            ```

            ## Conversiones de tipo
            Para cambiar de tipo se usan funciones como `realToInteger()` o `integerToReal()`.

            ```pseudocode
            var
              energia: real;
              energiaEntera: integer;
              vidas: integer;
              vidasF: real;
            end var

            energiaEntera := realToInteger(energia);
            vidasF := integerToReal(vidas);
            ```

        questions:
          - id: c-1-enum_tdrone
            language: C
            week: 1
            prompt: Declara un enumerado tDronEstado con los valores PARADO, EN_VUELO y ESTRELLADO.
            answer: |-
              typedef enum { 
                PARADO, 
                EN_VUELO, 
                ESTRELLADO 
              } tDronEstado;
            hint: la palabra reservada es typedef enum, recuerda poner ; a continuación del nombre del enum.

          - id: p-1-type_tdrone
            language: Pseudocode
            week: 1
            prompt: Declara un enumerado tDronEstado con los valores PARADO, EN_VUELO y ESTRELLADO.
            answer: |-
              type
                tDronEstado = { PARADO, EN_VUELO y ESTRELLADO }
              end type
            hint: No olvides las palabras reservadas type end type.

          - id: c-1-estado_en_vuelo
            language: C
            week: 1
            prompt: Declara una variable tDronEstado llamada estado e inicialízala a EN_VUELO.
            answer: |
              int main(){
                tDronEstado estado = EN_VUELO;
                return 0;
              }

            hint:

          - id: p-1-estado_en_vuelo
            language: Pseudocode
            week: 1
            prompt: Declara una variable tDronEstado llamada estado e inicialízala a EN_VUELO.
            answer: |-
              algorithm
                var
                  estado: tDronEstado;
                end var

              estado := EN_VUELO;
              
              end algorithm
            hint: 'Recuerda: primero declara, luego inicializa.'

          - id: c-1-lee_estado_enum
            language: C
            week: 1
            prompt: Lee el valor del estado del dron desde teclado usando scanf y guárdalo en estado.
            answer: |
              int main(){
                scanf("%u", &estado);
                return 0;
              }

            hint: El especificador de formato para leer enumerativos es %u

          - id: p-1-readenum_estado
            language: Pseudocode
            week: 1
            prompt: Lee el valor del estado del dron desde teclado usando scanf y guárdalo en estado.
            answer: |
              algorithm
                estado := readEnum();
              end algorithm
            hint: La función que se encarga de leer un enumerativo es readEnum.

          - id: c-1-printf_estado_num
            language: C
            week: 1
            prompt: 'Imprime el valor numérico del estado del dron con una explicación. Usa "Estado (0=PARADO, 1=EN_VUELO, 2=ESTRELLADO): x" para la impresión, siendo "x" el especificador de formato.'
            answer: |
              int main(){
                printf("Estado (0=PARADO, 1=EN_VUELO, 2=ESTRELLADO): %d", estado);
                return 0;
              }
              

            hint: 'Ejemplo de ejecución: "Estado (0=PARADO, 1=EN_VUELO, 2=ESTRELLADO): 1"'

          - id: p-1-writestring_estado_num
            language: Pseudocode
            week: 1
            prompt: 'Imprime el valor del estado del dron con una explicación. Usa "Estado: x" para la impresión, siendo "x" el valor a enseñar.'
            answer: |-
              algorithm
                writeString("Estado: ");
                writeEnum(estado);
              end algorithm
            hint: 'Ejemplo de ejecución: Estado: 1'

          - id: c-1-incremento_iddron
            language: C
            week: 1
            prompt: Incrementa la variable idDron en 1 usando el operador de incremento al finalizar la carrera.
            answer: |
              int main(){
                idDron++;
                return 0;
              }
            hint:

          - id: p-1-incrementa_iddron
            language: Pseudocode
            week: 1
            prompt: Incrementa la variable idDron en 1 al finalizar la carrera.
            answer: |
              algorithm
                idDron := idDron +1;
              end algorithm
            hint: Recuerda que en pseudocódigo no existe el operador ++ o -- .

          - id: c-1-compuesto_bateria
            language: C
            week: 1
            prompt: Resta 10.5 a la bateríaInicial usando operador compuesto.
            answer: |
              int main(){
                bateriaInicial -= 10.5;
                return 0;
              }

            hint:

          - id: p-1-resta_bateria
            language: Pseudocode
            week: 1
            prompt: Resta 10.5 a la bateríaInicial .
            answer: |
              algorithm
                bateriaInicial := bateriaInicial - 10.5;
              end algorithm
            hint:

          - id: c-1-suficiente_bool
            language: C
            week: 1
            prompt: Calcula si la batería es suficiente usando un operador relacional y guarda el resultado en en una variable booleana "suficiente". Diremos que la batería es suficiente si tiene al menos un 20%
            answer: |
              int main(){
                bool suficiente = bateriaInicial >= 20.0;
                return 0;
              }

            hint: batería mayor o igual a 20.0

          - id: p-1-suficiente_bool
            language: Pseudocode
            week: 1
            prompt: Calcula si la batería es suficiente usando un operador relacional y guarda el resultado en en una variable booleana "suficiente". Diremos que la batería es suficiente si tiene al menos un 20%. Necesitarás este operador "≥".
            answer: |-
              algorithm
                var
                  suficiente: boolean;
                end var

                suficiente := bateriaInicial ≥ 20.0;
              
              end algorithm
            hint: 'Ten en cuenta que una comparación con operadores relacionales, siempre devuelven un resultado booleano de verdadero o falso, por eso podemos guardar el resultado en una variable booleana. Extra: bateria ≥ a 20.0.'

          - id: c-1-ternario_en_servicio
            language: C
            week: 1
            prompt: Usa el operador ternario para imprimir "En servicio" si dronActivo es verdadero, si no imprime "Fuera de servicio".
            answer: |
              int main(){
                printf("%s", dronActivo ? "En servicio" : "Fuera de servicio");
                return 0;
              }

            hint: 'recuerda que printf acepta como argumento cualquier expresión que devuelva un valor, por eso podemos usar el operador ternario. Ejemplo: printf("%s", variable o condición ? "output1"" : ""output2"");"'

          - id: c-1-ternario_apto
            language: C
            week: 1
            prompt: Imprime "Apto para siguiente ronda" si suficiente es verdadero, si no imprime "No apto", usando ternario.
            answer: |
              int main(){
                printf("%s", suficiente ? "Apto para siguiente ronda" : "No apto");
                return 0;
              }
            hint:

          - id: c-1-cast_bateriaentera
            language: C
            week: 1
            prompt: Convierte bateriaInicial a entero y guárdalo en bateriaEntera.
            answer: |
      
              int main(){
                int bateriaEntera = (int)bateriaInicial;              
                return 0;
              }

            hint: Recuerda que para castear una variable utilizas (tipo)variable.

          - id: p-1-cast_bateriaentera
            language: Pseudocode
            week: 1
            prompt: Convierte bateriaInicial a entero y guárdalo en bateriaEntera.
            answer: |-
              algorithm
                var
                  bateriaEntera: integer;
                end var

                bateriaEntera := realToInteger(bateriaInicial);
              end algorithm
            hint: Recuerda que para castear una variable decimal a una entera usamos realToInteger().
              También recuerda que primero debes declarar la variable bateriaEntera.

          - id: c-1-cast_nuevabateria
            language: C
            week: 1
            prompt: Convierte bateriaEntera otra vez a decimal y guárdalo en nuevaBateria.
            answer: |
              int main(){
                float nuevaBateria = (float)bateriaEntera;
                return 0;
              }
            hint:

          - id: p-1-cast_nuevabateria
            language: Pseudocode
            week: 1
            prompt: Convierte bateriaEntera otra vez a decimal y guárdalo en nuevaBateria.
            answer: |-
              algorithm
                var
                  nuevaBateria: integer;
                end var
  
                nuevaBateria := integerToReal(bateriaInicial);
              end algorithm
            hint:

  - number: 2
    explanation: |
      Explicación de semana 2
    levels:
      - number: 1
        explanation:
          C: |-
            ## Arrays en C

            Un **array** es una colección de elementos del mismo tipo almacenados en posiciones consecutivas de memoria.  
            El tamaño del array debe ser fijo y conocerse en el momento de compilar.

            ---
            ### Tamaño con número fijo o con constante
            El tamaño puede definirse con un número:
            ```c
            #define MAX_ENEMIGOS 5

            int main() {
                int puntosEnemigos[5];
                return 0;
            }
            ```

            O puede definirse con una constante:
            ```c
            #define MAX_ENEMIGOS 5

            int main() {
                int puntosEnemigos[MAX_ENEMIGOS];
                return 0;
            }
            ```

            ---
            ## Inicialización de arrays de tipos primitivos
            Se puede inicializar un array al declararlo:
            ```c
            #define MAX_ENEMIGOS 5

            int main() {
                int puntosEnemigos[MAX_ENEMIGOS] = {100, 200, 150, 300, 500};
                return 0;
            }
            ```

            También se puede declarar y luego asignar valores por índice:
            ```c
            #define MAX_ENEMIGOS 5

            int main() {
                int puntosEnemigos[MAX_ENEMIGOS];
                puntosEnemigos[0] = 100;
                puntosEnemigos[1] = 200;
                puntosEnemigos[2] = 150;
                puntosEnemigos[3] = 300;
                puntosEnemigos[4] = 500;
                return 0;
            }
            ```

            *Recuerda*: en C los índices empiezan en **0**.

            ---
            ## Arrays de cadenas
            Una cadena en C es un array de `char` terminado con `'\0'`.  
            Para un array de varias cadenas se usa un array bidimensional:

            ```c
            #define MAX_OBJETOS 3
            #define MAX_LONGITUD 20

            int main() {
                char inventario[MAX_OBJETOS][MAX_LONGITUD];
                return 0;
            }
            ```

            ### Inicialización directa
            ```c
            #define MAX_OBJETOS 3
            #define MAX_LONGITUD 20

            int main() {
                char inventario[MAX_OBJETOS][MAX_LONGITUD] = {"Espada", "Escudo", "Poción"};
                return 0;
            }
            ```

            ### Asignación después de declarar
            ```c
            #include <string.h>
            #define MAX_OBJETOS 3
            #define MAX_LONGITUD 20

            int main() {
                char inventario[MAX_OBJETOS][MAX_LONGITUD];
                strcpy(inventario[0], "Espada");
                strcpy(inventario[1], "Escudo");
                strcpy(inventario[2], "Poción");
                return 0;
            }
            ```

            ---
            ## Acceso a elementos
            Para acceder a un elemento numérico:
            ```c
            #define MAX_ENEMIGOS 5

            int main() {
                int puntosEnemigos[MAX_ENEMIGOS] = {100, 200, 150, 300, 500};
                int valor = puntosEnemigos[2]; // 150
                return 0;
            }
            ```

            Para acceder a una cadena:
            ```c
            #define MAX_OBJETOS 3
            #define MAX_LONGITUD 20

            int main() {
                char inventario[MAX_OBJETOS][MAX_LONGITUD] = {"Espada", "Escudo", "Poción"};
                // inventario[1] → "Escudo"
                return 0;
            }
            ```

          Pseudocode: |-
            ## Arrays en pseudocódigo

            Un **array** es una colección de elementos del mismo tipo en posiciones consecutivas.  
            El tamaño es fijo y se define al crear el array.

            ---
            ### Tamaño con número fijo o constante
            Con número fijo:
            ```text
            algorithm
              var
                puntosEnemigos: vector[5] of integer;
              end var
            end algorithm
            ```

            Con constante:
            ```text
            const
              MAX_ENEMIGOS: integer = 5;
            end const

            algorithm
              var
                puntosEnemigos: vector[MAX_ENEMIGOS] of integer;
              end var
            end algorithm
            ```

            ---
            ## Inicialización de arrays de tipos primitivos
            En pseudocódigo **no se permite inicializar arrays con llaves**.  
            Se declara y luego se asigna valor por índice:

            ```text
            const
              MAX_ENEMIGOS: integer = 5;
            end const

            algorithm
              var
                puntosEnemigos: vector[MAX_ENEMIGOS] of integer;
              end var

              puntosEnemigos[1] := 100;
              puntosEnemigos[2] := 200;
              puntosEnemigos[3] := 150;
              puntosEnemigos[4] := 300;
              puntosEnemigos[5] := 500;
            end algorithm
            ```

            *Recuerda*: en pseudocódigo los índices empiezan en **1**.

            ---
            ## Arrays de cadenas
            Un array de cadenas es un vector donde cada elemento es una cadena:

            ```text
            const
              MAX_OBJETOS: integer = 3;
            end const

            algorithm
              var
                inventario: vector[MAX_OBJETOS] of string;
              end var

              inventario[1] := "Espada";
              inventario[2] := "Escudo";
              inventario[3] := "Poción";
            end algorithm
            ```

            ---
            ## Acceso a elementos
            Para acceder a un elemento numérico:
            ```text
            algorithm
              var
                puntosEnemigos: vector[5] of integer;
                valor: integer;
              end var

              puntosEnemigos[1] := 100;
              valor := puntosEnemigos[1];
            end algorithm
            ```

            Para acceder a una cadena:
            ```text
            algorithm
              var
                inventario: vector[3] of string;
                objeto: string;
              end var

              inventario[1] := "Espada";
              objeto := inventario[1];
            end algorithm
            ```

        questions:
          - id: c-2-include_stdio
            language: C
            week: 2
            prompt: Incluye la biblioteca estándar de entrada/salida en C para poder usar printf y scanf.
            answer: |
              #include <stdio.h>
            hint: 'Empieza por #include'

          - id: c-2-include_stdbool
            language: C
            week: 2
            prompt: Incluye la biblioteca necesaria para poder usar variables booleanas en C.
            answer: |
              #include <stdbool.h>
            hint: 'El nombre contiene "std"'

          - id: c-2-include_string
            language: C
            week: 2
            prompt: Incluye la biblioteca necesaria para trabajar con cadenas de caracteres (funciones como strcpy, strcat, strcmp, strlen).
            answer: |
              #include <string.h>
            hint: 'La biblioteca clásica para manipulación de strings, el nombre acaba con .h .'

          - id: c-2-max_plants_define
            language: C
            week: 2
            prompt: Declara una constante MAX_PLANTS con valor 5 usando define.
            answer: |
              #define MAX_PLANTS 5
            hint:

          - id: p-2-max_plants_const
            language: Pseudocode
            week: 2
            prompt: Declara una constante MAX_PLANTS con valor 5.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const
            hint:

          - id: c-2-max_name_define
            language: C
            week: 2
            prompt: Declara una constante MAX_NAME con valor 25 usando define.
            answer: |
              #define MAX_NAME 25
            hint:

          - id: c-2-const_temp_minima
            language: C
            week: 2
            prompt: Dentro de la función main, declara una constante local de tipo float llamada TEMP_MINIMA con valor 15.0.
            answer: |
              int main() {
                  const float TEMP_MINIMA = 15.0;
                  return 0;
              }
            hint: |
              int main(){

                // Código

                return 0;
              }

          - id: p-2-const_temp_minima
            language: Pseudocode
            week: 2
            prompt: Declara una constante de tipo decimal llamada TEMP_MINIMA con valor 15.0.
            answer: |
              const
                TEMP_MINIMA: real = 15.0;
              end const
            hint: Los decimales en pseudocódigo son el tipo real.

          - id: c-2-array-nombres-solo
            language: C
            week: 2
            prompt: Declara un array de cadenas nombrePlantas para 5 plantas, cada nombre de 20 caracteres.
            answer: |
              int main() {
                  char nombrePlantas[5][20];
                  return 0;
              }
            hint: Primero va el número de elementos, luego el tamaño de cada string.

          - id: p-2-array-nombres-solo
            language: Pseudocode
            week: 2
            prompt: Declara un array de strings nombrePlantas para 5 plantas.
            answer: |
              algorithm
                var
                  nombrePlantas: vector[5] of string;
                end var
              end algorithm
            hint:


          - id: c-2-arr_nombreplanta
            language: C
            week: 2
            prompt: |
              Declara las constantes MAX_PLANTS = 5 y MAX_NAME = 25.

              Dentro de main, declara un array de cadenas nombrePlanta para los nombres de las plantas usando ambas constantes.
            answer: |
              #define MAX_PLANTS 5
              #define MAX_NAME 25

              int main() {
                  char nombrePlanta[MAX_PLANTS][MAX_NAME];
                  return 0;
              }
            hint: Después del nombre del array va primero el maximo de plantas y después el de los nombres

          - id: p-2-arr_nombreplanta
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5.

              Dentro del algoritmo principal, declara un array de strings nombrePlanta para los nombres de las plantas usando dicha constante.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const

              algorithm
                var
                  nombrePlanta: vector[MAX_PLANTS] of string;
                end var
              end algorithm
            hint: No olvides todas las palabras reservadas como const, algorithm y var.

          - id: c-2-arr_sensoresactivos
            language: C
            week: 2
            prompt: |
              Incluye la biblioteca necesaria para booleanos.

              Declara la constante MAX_PLANTS = 5 y un array booleano sensoresActivos usando MAX_PLANTS dentro de main.
            answer: |
              #include <stdbool.h>
              #define MAX_PLANTS 5

              int main() {
                  bool sensoresActivos[MAX_PLANTS];
                  return 0;
              }
            hint: Incluye stdbool y usa bool, no int.

          - id: p-2-arr_sensoresactivos
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5.

              Dentro del algoritmo principal, declara un array de booleanos sensoresActivos usando dicha constante.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const

              algorithm
                var
                   sensoresActivos: vector[MAX_PLANTS] of boolean;
                end var
              end algorithm
            hint: No olvides todas las palabras reservadas como const, algorithm y var.

          - id: c-2-array-alturas
            language: C
            week: 2
            prompt: Declara la constante MAX_PLANTAS = 5 y un array float alturas usando la constante.
            answer: |
              #define MAX_PLANTAS 5

              int main() {
                  float alturas[MAX_PLANTAS];
                  return 0;
              }
            hint:

          - id: p-2-array-alturas
            language: Pseudocode
            week: 2
            prompt: Declara la constante MAX_PLANTAS = 5 y un array real alturas usando la constante.
            answer: |
              const
                MAX_PLANTAS: integer = 5;
              end const

              algorithm
                var
                  alturas: vector[MAX_PLANTAS] of real;
                end var
              end algorithm
            hint:

          - id: c-2-array-nombres-alturas
            language: C
            week: 2
            prompt: Declara las constantes MAX_PLANTAS = 5 y MAX_NOMBRE = 20. Declara un array de cadenas nombrePlantas y un array float alturas, ambos usando MAX_PLANTAS.
            answer: |
              #define MAX_PLANTAS 5
              #define MAX_NOMBRE 20

              int main() {
                  char nombrePlantas[MAX_PLANTAS][MAX_NOMBRE];
                  float alturas[MAX_PLANTAS];
                  return 0;
              }
            hint:

          - id: p-2-array-nombres-alturas
            language: Pseudocode
            week: 2
            prompt: Declara la constante MAX_PLANTAS = 5. Declara un array de strings nombrePlantas y un array de reales alturas usando la constante.
            answer: |
              const
                MAX_PLANTAS: integer = 5;
              end const

              algorithm
                var
                  nombrePlantas: vector[MAX_PLANTAS] of string;
                  alturas: vector[MAX_PLANTAS] of real;
                end var
              end algorithm
            hint:

          - id: c-2-arr_humedad
            language: C
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5 y un array de enteros humedad con MAX_PLANTS,

              inicializado con los valores "60, 85, 72, 91, 65" en la misma linea dentro de main.
            answer: |
              #define MAX_PLANTS 5

              int main() {
                  int humedad[MAX_PLANTS] = {60, 85, 72, 91, 65};
                  return 0;
              }
            hint: Los valores deben estar entre llaves, separados por comas.

          - id: p-2-arr_humedad
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5.

              Dentro del algoritmo principal, declara un array de enteros humedad con MAX_PLANTS.

              Inicializa el array con los valores "60, 85, 72, 91, 65".
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const

              algorithm
                var
                   humedad: vector[MAX_PLANTS] of integer;
                end var

                humedad[1] := 60;
                humedad[2] := 85;
                humedad[3] := 72;
                humedad[4] := 91;
                humedad[5] := 65;
              end algorithm
            hint: Recuerda que en pseudocódigo, primero declaramos las variables y después las inicializamos.

          - id: c-2-inicializa-alturas
            language: C
            week: 2
            prompt: Declara la constante MAX_PLANTAS = 5 y un array float alturas, inicializándolo con los valores 11.2, 18.4, 13.0, 17.5, 15.1.
            answer: |
              #define MAX_PLANTAS 5

              int main() {
                  float alturas[MAX_PLANTAS] = {11.2, 18.4, 13.0, 17.5, 15.1};
                  return 0;
              }
            hint:

          - id: p-2-inicializa-alturas
            language: Pseudocode
            week: 2
            prompt: Declara la constante MAX_PLANTAS = 5 y un array real alturas. Inicializa los 5 valores a 11.2, 18.4, 13.0, 17.5, 15.1.
            answer: |
              const
                MAX_PLANTAS: integer = 5;
              end const

              algorithm
                var
                  alturas: vector[MAX_PLANTAS] of real;
                end var

                alturas[1] := 11.2;
                alturas[2] := 18.4;
                alturas[3] := 13.0;
                alturas[4] := 17.5;
                alturas[5] := 15.1;
              end algorithm
            hint:

      - number: 2
        explanation:
          C: |-
            ## Matrices (arrays bidimensionales) en C

            Una **matriz** es un array con **filas** y **columnas**.  
            En C, el tamaño suele fijarse con **constantes del preprocesador** (`#define`) declaradas **fuera** de `main`.  
            La forma general es: `tipo matriz[FILAS][COLUMNAS];` (siempre **primero filas, luego columnas**).

            ---
            ### Declaración con constantes fuera de `main`
            ```c
            #define FILAS 3
            #define COLUMNAS 4

            int main() {
                int tablero[FILAS][COLUMNAS];
                return 0;
            }
            ```

            ---
            ### Inicialización con llaves `{}` al declarar
            Puedes dar valores iniciales por filas:
            ```c
            #define FILAS 2
            #define COLUMNAS 3

            int main() {
                int mapa[FILAS][COLUMNAS] = {
                    {1, 0, 0},
                    {0, 1, 0}
                };
                return 0;
            }
            ```

            ---
            ### Inicialización **manual** elemento a elemento
            También puedes asignar después de declarar.  
            *Recuerda:* en C los índices empiezan en **0**.
            ```c
            #define FILAS 2
            #define COLUMNAS 3

            int main() {
                int zonas[FILAS][COLUMNAS];
                zonas[0][0] = 1;
                zonas[0][1] = 0;
                zonas[0][2] = 0;

                zonas[1][0] = 0;
                zonas[1][1] = 1;
                zonas[1][2] = 0;
                return 0;
            }
            ```

            ---
            ### Matrices booleanas
            Para usar `bool`, incluye la cabecera adecuada:
            ```c
            #include <stdbool.h>
            #define FILAS 2
            #define COLUMNAS 3

            int main() {
                bool zonaActiva[FILAS][COLUMNAS];

                zonaActiva[0][0] = true;
                zonaActiva[0][1] = false;
                zonaActiva[0][2] = false;

                zonaActiva[1][0] = false;
                zonaActiva[1][1] = true;
                zonaActiva[1][2] = false;
                return 0;
            }
            ```

            ---
            ### Acceso a un elemento concreto
            Acceder siempre como `[fila][columna]`:
            ```c
            #define FILAS 2
            #define COLUMNAS 3

            int main() {
                float valores[FILAS][COLUMNAS] = {
                    {6.1f, 6.3f, 6.0f},
                    {7.1f, 7.0f, 6.9f}
                };
                float x = valores[1][0]; // fila 2, columna 1
                
                // Puedes usar x como desees (7.1)
                return 0;
            }
            ```

          Pseudocode: |-
            ## Matrices en pseudocódigo

            Una **matriz** es un vector con **dos dimensiones**: filas y columnas.  
            El tamaño es **fijo** y se define al crearla.  
            Las **constantes** van antes del `algorithm`; dentro del `algorithm` se declaran variables en `var ... end var`.  
            *Importante:* en este pseudocódigo los índices comienzan en **1**.

            ---
            ### Declaración con constantes y dentro de `algorithm`
            ```text
            const
              FILAS: integer = 3;
              COLUMNAS: integer = 4;
            end const

            algorithm
              var
                tablero: vector[FILAS][COLUMNAS] of integer;
              end var
            end algorithm
            ```

            ---
            ### Inicialización **manual** (no se permiten llaves)
            La matriz se declara primero y luego se asigna **elemento a elemento**:
            ```text
            const
              FILAS: integer = 2;
              COLUMNAS: integer = 3;
            end const

            algorithm
              var
                zonas: vector[FILAS][COLUMNAS] of integer;
              end var

              zonas[1][1] := 1;
              zonas[1][2] := 0;
              zonas[1][3] := 0;

              zonas[2][1] := 0;
              zonas[2][2] := 1;
              zonas[2][3] := 0;
            end algorithm
            ```

            ---
            ### Matrices booleanas
            ```text
            const
              FILAS: integer = 2;
              COLUMNAS: integer = 3;
            end const

            algorithm
              var
                activo: vector[FILAS][COLUMNAS] of boolean;
              end var

              activo[1][1] := true;
              activo[1][2] := false;
              activo[1][3] := false;

              activo[2][1] := false;
              activo[2][2] := true;
              activo[2][3] := false;
            end algorithm
            ```

            ---
            ### Acceso a un elemento concreto
            Usa siempre `[fila][columna]`:
            ```text
            const
              FILAS: integer = 2;
              COLUMNAS: integer = 3;
            end const

            algorithm
              var
                valores: vector[FILAS][COLUMNAS] of real;
                dato: real;
              end var

              valores[1][1] := 6.1;
              valores[1][2] := 6.3;
              valores[1][3] := 6.0;
              valores[2][1] := 7.1;
              valores[2][2] := 7.0;
              valores[2][3] := 6.9;

              dato := valores[2][1];  { fila 2, columna 1 }
            end algorithm

        questions:
          - id: c-2-mat_sensorestemp
            language: C
            week: 2
            prompt: |
              Declara las constantes FILAS = 3 y COLUMNAS = 4.

              Dentro de main, declara una matriz de enteros sensoresTemperatura con FILAS Y COLUMNAS.
            answer: |
              #define FILAS 3
              #define COLUMNAS 4

              int main() {
                  int sensoresTemperatura[FILAS][COLUMNAS];
                  return 0;
              }
            hint: En una matriz van siempre primero las filas y luego las columnas

          - id: p-2-mat_sensorestemp
            language: Pseudocode
            week: 2
            prompt: |
              Declara las constantes FILAS = 3 y COLUMNAS = 4.

              Dentro del algoritmo principal, declara una matriz de enteros sensoresTemperatura con FILAS Y COLUMNAS.
            answer: |
              const
                FILAS: integer = 3;
                COLUMNAS: integer = 4;
              end const

              algorithm
                var
                   sensoresTemperatura: vector[FILAS][COLUMNAS] of integer;
                end var
              end algorithm
            hint: En una matriz van siempre primero las filas y luego las columnas, no olvides todas las palabras reservadas para declarar los datos.


          - id: c-2-mat_zonas_bool
            language: C
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Dentro de main, declara una matriz booleana zonas con FILAS Y COLUMNAS.

              Inicialízala con los valores: 
              fila 1: true, false, false 
              fila 2: false, true, false.
            answer: |
              #include <stdbool.h>
              #define FILAS 2
              #define COLUMNAS 3

              int main() {
                  bool zonas[FILAS][COLUMNAS];

                  zonas[0][0] = true;
                  zonas[0][1] = false;
                  zonas[0][2] = false;

                  zonas[1][0] = false;
                  zonas[1][1] = true;
                  zonas[1][2] = false;

                  return 0;
              }
            hint: Recuerda la biblioteca para el tipo booleano.

          - id: p-2-mat_zonas_bool
            language: Pseudocode
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Dentro del algoritmo principal, declara una matriz booleana zonas con FILAS Y COLUMNAS. 

              Inicialízala con los valores: 
              fila 1: true, false, false 
              fila 2: false, true, false.
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const

              algorithm
                var
                   zonas: vector[FILAS][COLUMNAS] of boolean;
                end var

                zonas[1][1] := true;
                zonas[1][2] := false;
                zonas[1][3] := false;

                zonas[2][1] := false;
                zonas[2][2] := true;
                zonas[2][3] := false;
              end algorithm
            hint: No olvides las palabras reservadas para declarar los datos y el algoritmo principal.

          - id: c-2-matriz-inicializa-llaves
            language: C
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3. 

              Dentro de la función main, declara e inicializa una matriz de enteros llamada `zonas` con los siguientes valores usando llaves `{}`:
              - fila 1: 1, 0, 0
              - fila 2: 0, 1, 0
            answer: |
              #define FILAS 2
              #define COLUMNAS 3

              int main() {
                  int zonas[FILAS][COLUMNAS] = {
                      {1, 0, 0},
                      {0, 1, 0}
                  };
                  return 0;
              }
            hint: |
              Ejemplo: 
                tipo matriz[2][3] = { {a, b, c}, {d, e, f} };

          - id: c-2-matriz-inicializa-manual
            language: C
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Dentro de la función main, declara una matriz de enteros llamada `zonas` y asigna manualmente los siguientes valores:
              - fila 1: 1, 0, 0
              - fila 2: 0, 1, 0
            answer: |
              #define FILAS 2
              #define COLUMNAS 3

              int main() {
                  int zonas[FILAS][COLUMNAS];
                  zonas[0][0] = 1;
                  zonas[0][1] = 0;
                  zonas[0][2] = 0;

                  zonas[1][0] = 0;
                  zonas[1][1] = 1;
                  zonas[1][2] = 0;
                  return 0;
              }
            hint: |
              Asigna cada elemento individualmente con zonas[fila][columna].
              Recuerda: en C los índices empiezan en 0.

          - id: p-2-matriz-inicializa-const
            language: Pseudocode
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Dentro del algoritmo principal, declara una matriz de enteros zonas de tamaño FILAS x COLUMNAS.

              Inicializa la matriz manualmente con los valores siguientes:
              - fila 1: 1, 0, 0
              - fila 2: 0, 1, 0
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const

              algorithm
                var
                  zonas: vector[FILAS][COLUMNAS] of integer;
                end var

                zonas[1][1] := 1;
                zonas[1][2] := 0;
                zonas[1][3] := 0;
                zonas[2][1] := 0;
                zonas[2][2] := 1;
                zonas[2][3] := 0;
              end algorithm
            hint: |
              En pseudocódigo la inicialización de matrices es siempre manual, elemento a elemento.
              Los índices comienzan en 1.

          - id: c-2-matriz-ph
            language: C
            week: 2
            prompt: |
              Incluye stdio.

              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Declara una matriz float phSuelo.

              Inicializa utilizando {} con los valores:
              fila 1: 6.1, 6.3, 6.0
              fila 2: 7.1, 7.0, 6.9

              Imprime el valor de la posición fila 2, columna 1 con el formato "pH: x".
            answer: |
              #include <stdio.h>

              #define FILAS 2
              #define COLUMNAS 3

              int main() {
                  float phSuelo[FILAS][COLUMNAS] = {
                      {6.1, 6.3, 6.0},
                      {7.1, 7.0, 6.9}
                  };
                  printf("pH: %.1f\n", phSuelo[1][0]);
                  return 0;
              }
            hint: |
              Ejemplo de ejecución: 
                pH: 7.1

          - id: p-2-matriz-ph
            language: Pseudocode
            week: 2
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Declara una matriz real phSuelo.

              Inicializa los valores:
              fila 1: 6.1, 6.3, 6.0
              fila 2: 7.1, 7.0, 6.9

              Imprime el valor de la posición fila 2, columna 1 el formato "pH: x".
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const

              algorithm
                var
                  phSuelo: vector[FILAS][COLUMNAS] of real;
                end var

                phSuelo[1][1] := 6.1;
                phSuelo[1][2] := 6.3;
                phSuelo[1][3] := 6.0;
                phSuelo[2][1] := 7.1;
                phSuelo[2][2] := 7.0;
                phSuelo[2][3] := 6.9;

                writeString("pH: ");
                writeReal(phSuelo[2][1]);
              end algorithm
            hint: |
              Recuerda que en pseudocódigo no puedes imprimir mas de un dato por linea.

              Ejemplo de ejecución: 
              pH: 7.1


      - number: 3
        explanation:
          C: |-
            ## Entrada y salida con arrays en C

            Ya sabes declarar arrays. En este nivel aprenderás a **leer y escribir** datos dentro de ellos,  
            y a **copiar** y **comparar** cadenas de caracteres usando funciones estándar.

            ---
            ### Leer datos numéricos en arrays

            Puedes leer enteros o reales uno por uno usando `scanf`:

            ```c
            #define MAX_PUNTOS 3

            int main() {
                int puntos[MAX_PUNTOS];

                printf("Puntos ronda 1: ");
                scanf("%d", &puntos[0]);

                printf("Puntos ronda 2: ");
                scanf("%d", &puntos[1]);

                printf("Puntos ronda 3: ");
                scanf("%d", &puntos[2]);

                return 0;
            }
            ```

            ---
            ### Mostrar datos de un array

            Para imprimir los valores guardados:

            ```c
            printf("Ronda 1: %d\n", puntos[0]);
            printf("Ronda 2: %d\n", puntos[1]);
            printf("Ronda 3: %d\n", puntos[2]);
            ```

            ---
            ### Arrays de cadenas: copiar con `strncpy`

            Las cadenas se almacenan en arrays bidimensionales.  
            Para copiar texto en cada posición, se usa `strncpy`.

            ```c
            #include <string.h>

            #define MAX_ARMAS 2
            #define MAX_NOMBRE 20

            int main() {
                char armas[MAX_ARMAS][MAX_NOMBRE];

                strncpy(armas[0], "Espada de fuego", MAX_NOMBRE);
                strncpy(armas[1], "Arco helado", MAX_NOMBRE);

                return 0;
            }
            ```

            ---
            ### Comparar cadenas con `strcmp`

            Para saber si dos cadenas son iguales, se usa `strcmp`,  
            que devuelve 0 si son iguales:

            ```c
            #include <string.h>

            int esIgual;
            esIgual = strcmp(armas[0], "Espada de fuego") == 0 ? 1 : 0;
            ```

            *Si `esIgual` vale 1, las cadenas son iguales.*

          Pseudocode: |-
            ## Entrada y salida con arrays

            Ahora aprenderás a **leer y mostrar** datos almacenados en arrays.  
            También verás cómo **copiar cadenas** y realizar **comparaciones simples**.

            ---
            ### Leer datos numéricos

            ```text
            const
              MAX_PUNTOS: integer = 3;
            end const

            algorithm
              var
                puntos: vector[MAX_PUNTOS] of integer;
              end var

              writeString("Puntos ronda 1:");
              readInteger(puntos[1]);

              writeString("Puntos ronda 2:");
              readInteger(puntos[2]);

              writeString("Puntos ronda 3:");
              readInteger(puntos[3]);
            end algorithm
            ```

            ---
            ### Escribir datos

            ```text
            algorithm
              writeString("Ronda 1:");
              writeInteger(puntos[1]);

              writeString("Ronda 2:");
              writeInteger(puntos[2]);

              writeString("Ronda 3:");
              writeInteger(puntos[3]);
            end algorithm
            ```

            ---
            ### Leer cadenas

            ```text
            const
              MAX_ARMAS: integer = 2;
            end const

            algorithm
              var
                armas: vector[MAX_ARMAS] of string;
              end var

              writeString("Nombre del arma 1:");
              readString(armas[1]);

              writeString("Nombre del arma 2:");
              readString(armas[2]);
            end algorithm
            ```

            ---
            ### Comparar cadenas (conceptual)

            Para comparar cadenas, se supone una comparación simple:

            ```text
            algorithm
              var
                esIgual: boolean;
              end var

              esIgual := (armas[1] = "Espada de fuego");
              writeBoolean(esIgual);
            end algorithm
            ```

        questions:
          - id: c-2-inicializa-nombreplanta
            language: C
            week: 2
            prompt: |
              Incluye string

              Declara las constantes MAX_PLANTS = 5 y MAX_NAME = 25.

              Dentro de main, declara un array de cadenas nombrePlanta para los nombres de las plantas y 
              usa strncpy para inicializar el primer elemento a "Margarita".
            answer: |
              #include <string.h>
              #define MAX_PLANTS 5
              #define MAX_NAME 25

              int main() {
                  char nombrePlanta[MAX_PLANTS][MAX_NAME];
                  strncpy(nombrePlanta[0], "Margarita", MAX_NAME);
                  return 0;
              }
            hint: Usa strncpy para copiar la cadena al array de strings. No olvides pasar el tamaño máximo.

          - id: p-2-inicializa-nombreplanta
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5. 

              Dentro del algoritmo principal, declara un array de strings nombrePlanta y asigna "Margarita" al primer elemento.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const
              algorithm
                var
                  nombrePlanta: vector[MAX_PLANTS] of string;
                end var

                nombrePlanta[1] := "Margarita";
              end algorithm
            hint: En pseudocódigo los índices empiezan en 1.

          - id: c-2-inicializa-varios-nombres
            language: C
            week: 2
            prompt: |
              Incluye string.

              Declara las constantes MAX_PLANTS = 5 y MAX_NAME = 25.

              Dentro de main, declara un array de cadenas nombrePlanta y usa strncpy para inicializar los nombres 
              "Margarita", "Rosa", "Lirio", "Orquídea", "Girasol" en el array.
            answer: |
              #include <string.h>
              #define MAX_PLANTS 5
              #define MAX_NAME 25

              int main() {
                  char nombrePlanta[MAX_PLANTS][MAX_NAME];
                  strncpy(nombrePlanta[0], "Margarita", MAX_NAME);
                  strncpy(nombrePlanta[1], "Rosa", MAX_NAME);
                  strncpy(nombrePlanta[2], "Lirio", MAX_NAME);
                  strncpy(nombrePlanta[3], "Orquídea", MAX_NAME);
                  strncpy(nombrePlanta[4], "Girasol", MAX_NAME);
                  return 0;
              }
            hint: Siempre que copies un string, usa strncpy y el tamaño máximo como tercer argumento.

          - id: p-2-inicializa-varios-nombres
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5. 
              Declara un array de strings nombrePlanta y asigna los nombres 
              "Margarita", "Rosa", "Lirio", "Orquídea", "Girasol" en el array.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const
              algorithm
                var
                  nombrePlanta: vector[MAX_PLANTS] of string;
                end var

                nombrePlanta[1] := "Margarita";
                nombrePlanta[2] := "Rosa";
                nombrePlanta[3] := "Lirio";
                nombrePlanta[4] := "Orquídea";
                nombrePlanta[5] := "Girasol";
              end algorithm
            hint: Recuerda, índices desde 1 en pseudocódigo.

          - id: c-2-muestra-primer-nombre
            language: C
            week: 2
            prompt: |
              Incluye stdio y string.

              Declara las constantes MAX_PLANTS = 5 y MAX_NAME = 25.

              Declara un array de cadenas nombrePlanta, inicializa el primer elemento con "Margarita" usando strncpy,
              y muestra el primer nombre con printf.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_PLANTS 5
              #define MAX_NAME 25

              int main() {
                  char nombrePlanta[MAX_PLANTS][MAX_NAME];
                  strncpy(nombrePlanta[0], "Margarita", MAX_NAME);
                  printf("%s\n", nombrePlanta[0]);
                  return 0;
              }
            hint: Usa printf, recuerda el especificador de string y el salto de linea. También recuerda las bibliotecas necesarias.

          - id: p-2-muestra-primer-nombre
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5. 

              Declara un array de strings nombrePlanta, asigna "Margarita" al primer elemento 
              y muestra ese nombre con writeString.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const
              algorithm
                var
                  nombrePlanta: vector[MAX_PLANTS] of string;
                end var

                nombrePlanta[1] := "Margarita";
                writeString(nombrePlanta[1]);
              end algorithm
            hint: Primero declaramos, después asignamos valor y finalmente imprimimos.

          - id: c-2-copia-nombre-a-otro
            language: C
            week: 2
            prompt: |
              Incluye string.

              Declara las constantes MAX_PLANTS = 5 y MAX_NAME = 25. Declara un array de cadenas nombrePlanta.

              Usa strncpy para copiar el nombre "Margarita" en el primer elemento y después usa strncpy para copiar ese mismo nombre
              al segundo elemento.
            answer: |
              #include <string.h>
              #define MAX_PLANTS 5
              #define MAX_NAME 25

              int main() {
                  char nombrePlanta[MAX_PLANTS][MAX_NAME];
                  strncpy(nombrePlanta[0], "Margarita", MAX_NAME);
                  strncpy(nombrePlanta[1], nombrePlanta[0], MAX_NAME);
                  return 0;
              }
            hint: strncpy sirve para copiar tanto un literal como de un array a otro.

          - id: p-2-copia-nombre-a-otro
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTS = 5. 

              Declara un array de strings nombrePlanta, asigna "Margarita" al primer elemento
              y copia ese nombre al segundo elemento.
            answer: |
              const
                MAX_PLANTS: integer = 5;
              end const
              algorithm
                var
                  nombrePlanta: vector[MAX_PLANTS] of string;
                end var

                nombrePlanta[1] := "Margarita";
                nombrePlanta[2] := nombrePlanta[1];
              end algorithm
            hint: En pseudocódigo puedes asignar directamente un string a otro.

          - id: c-2-array-temp
            language: C
            week: 2
            prompt: |
              Incluye stdio.

              Declara la constante MAX_PLANTAS = 4 y un array float tempPlantas.

              Inicializa los valores a 19.2, 20.5, 22.1 y 18.9 usando {}. 

              Imprime el tercer valor con el formato "Temp: x".
            answer: |
              #include <stdio.h>

              #define MAX_PLANTAS 4

              int main() {
                  float tempPlantas[MAX_PLANTAS] = {19.2, 20.5, 22.1, 18.9};
                  printf("Temp: %.1f\n", tempPlantas[2]);
                  return 0;
              }
            hint: |
              Ejemplo de ejecución: 
              Temp: 22.1
              Fijate que solo hay un decimal.

          - id: p-2-array-temp
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTAS = 4.

              Declara un array real tempPlantas.

              Inicializa los valores a 19.2, 20.5, 22.1 y 18.9. 

              Imprime el tercer valor.
            answer: |
              const
                MAX_PLANTAS: integer = 4;
              end const

              algorithm
                var
                  tempPlantas: vector[MAX_PLANTAS] of real;
                end var

                tempPlantas[1] := 19.2;
                tempPlantas[2] := 20.5;
                tempPlantas[3] := 22.1;
                tempPlantas[4] := 18.9;

                writeReal(tempPlantas[3]);
              end algorithm
            hint: |
              Ejemplo de ejecución: 
              22.1
              

          - id: c-2-acceso-paralelos
            language: C
            week: 2
            prompt: |
              Incluye stdio y string.
              
              Declara las constantes MAX_PLANTAS = 3, MAX_NOMBRE = 10.
              
              Declara nombrePlantas (cadenas) y alturaPlantas (float).
              
              Inicializa con "Loto", "Boj", "Tejo" y 1.2, 0.4, 4.8.
              
              Imprime el nombre y altura de la primera planta, cada uno en su línea.
            answer: |
              #include <stdio.h>
              #include <string.h>
              #define MAX_PLANTAS 3
              #define MAX_NOMBRE 10
          
              int main() {
                  char nombrePlantas[MAX_PLANTAS][MAX_NOMBRE];
                  float alturaPlantas[MAX_PLANTAS];
                  strncpy(nombrePlantas[0], "Loto", MAX_NOMBRE);
                  strncpy(nombrePlantas[1], "Boj", MAX_NOMBRE);
                  strncpy(nombrePlantas[2], "Tejo", MAX_NOMBRE);
                  alturaPlantas[0] = 1.2;
                  alturaPlantas[1] = 0.4;
                  alturaPlantas[2] = 4.8;
                  printf("%s\n", nombrePlantas[0]);
                  printf("%.1f\n", alturaPlantas[0]);
                  return 0;
              }
            hint: |
              Recuerda importar las bibliotecas necesarias. Y no olvides los saltos de linea y fijate que el numero solo tiene
              un decimal.
              
              Ejemplo de ejecución:
                Loto
                1.2

          - id: p-2-acceso-paralelos
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTAS = 3.
              
              Declara nombrePlantas (strings) y alturaPlantas (reales).
              
              Inicializa con "Loto", "Boj", "Tejo" y 1.2, 0.4, 4.8.
              
              Imprime el nombre y altura de la primera planta, cada uno en su línea.
            answer: |
              const
                MAX_PLANTAS: integer = 3;
              end const
              
              algorithm
                var
                  nombrePlantas: vector[MAX_PLANTAS] of string;
                  alturaPlantas: vector[MAX_PLANTAS] of real;
                end var
              
                nombrePlantas[1] := "Loto";
                nombrePlantas[2] := "Boj";
                nombrePlantas[3] := "Tejo";
                alturaPlantas[1] := 1.2;
                alturaPlantas[2] := 0.4;
                alturaPlantas[3] := 4.8;
              
                writeString(nombrePlantas[1]);
                writeReal(alturaPlantas[1]);
              end algorithm
            hint: |
              Ejemplo de ejecución:
              Loto
              1.2

          - id: c-2-leer-string
            language: C
            week: 2
            prompt: |
              Incluye stdio.
              
              Declara la constante MAX_NOMBRE = 15.
              
              Dentro de main, declara la cadena nombrePlanta y lee su valor por teclado usando scanf. Imprime el nombre en el formato "Nombre: x".
            answer: |
              #include <stdio.h>
              
              #define MAX_NOMBRE 15
          
              int main() {
                  char nombrePlanta[MAX_NOMBRE];
                  scanf("%s", nombrePlanta);
                  printf("Nombre: %s\n", nombrePlanta);
                  return 0;
              }
            hint: |
              Recuerda la biblioteca y el salto de linea en el print.
              
              Ejemplo de ejecución: 
              
              Nombre: Jacinto

          - id: p-2-leer-string
            language: Pseudocode
            week: 2
            prompt: |
              Dentro del algoritmo principal, declara una variable nombrePlanta de tipo string.
              
              Lee su valor usando readString y después imprímelo.
            answer: |
              algorithm
                var
                  nombrePlanta: string;
                end var
              
                nombrePlanta := readString();
                writeString(nombrePlanta);
              end algorithm
            hint: Recuerda usar readString para leer el dato.

          - id: c-2-leer-array-int
            language: C
            week: 2
            prompt: |
              Incluye stdio.
              
              Declara la constante MAX_PLANTAS = 3.
              
              Declara el array edadPlantas.
              
              Lee 3 valores enteros por teclado y guárdalos en el array. Imprime el segundo valor leído.
            answer: |
              #include <stdio.h>
              
              #define MAX_PLANTAS 3
              
              int main() {
                  int edadPlantas[MAX_PLANTAS];
                  scanf("%d", &edadPlantas[0]);
                  scanf("%d", &edadPlantas[1]);
                  scanf("%d", &edadPlantas[2]);
                  printf("%d\n", edadPlantas[1]);
                  return 0;
              }
            hint: |
              El usuario debe escribir 3 números. 
              
              Ejemplo entrada: 7 8 10
              
              Ejemplo salida: 8

          - id: p-2-leer-array-int
            language: Pseudocode
            week: 2
            prompt: |
              Declara la constante MAX_PLANTAS = 3.
              
              Declara el array edadPlantas.
              
              Lee 3 valores enteros usando readInteger y guárdalos en el array. Imprime el segundo valor.
            answer: |
              const
                MAX_PLANTAS: integer = 3;
              end const
              
              algorithm
                var
                  edadPlantas: vector[MAX_PLANTAS] of integer;
                end var
              
                edadPlantas[1] := readInteger();
                edadPlantas[2] := readInteger();
                edadPlantas[3] := readInteger();
              
                writeInteger(edadPlantas[2]);
              end algorithm
            hint: Recuerda, cada readInteger debe ir en línea.


  - number: 3
    explanation: |
      Explicación de semana 3
    levels:
      - number: 1
        explanation:
          C: |-
            ## Enumerados, cadenas y arrays paralelos (tema: videojuegos)

            Esta semana aprenderás a representar información de videojuegos como tipos de enemigos, nombres de personajes, salud, y estados, usando enumerados, cadenas, arrays paralelos y matrices.

            ---
            ### Enumerados

            Sirven para definir categorías con nombres.  
            Por ejemplo, los **tipos de enemigo**:

            ```c
            typedef enum {
                ZOMBIE,
                ALIEN,
                ROBOT
            } tTipoEnemigo;
            ```

            Ahora puedes guardar un tipo por enemigo:

            ```c
            tTipoEnemigo tipo = ALIEN;
            ```

            ---
            ### Arrays de enumerados

            Puedes crear un array con el tipo de cada enemigo:

            ```c
            #define MAX_ENEMIGOS 3

            tTipoEnemigo enemigos[MAX_ENEMIGOS] = { ZOMBIE, ALIEN, ROBOT };
            ```

            ---
            ### Cadenas con strncpy

            Para guardar nombres de personajes se usa un array de `char`:

            ```c
            char nombre1[MAX_NOMBRE];
            char nombre2[MAX_NOMBRE];
            ```

            Puedes copiar el nombre usando `strncpy`:

            ```c
            strncpy(nombre1, "Link", MAX_NOMBRE);
            strncpy(nombre2, "Zelda", MAX_NOMBRE);
            ```

            ---
            ### Arrays paralelos

            Son arrays diferentes relacionados por posición.  
            Por ejemplo, un array de nombres y otro de vidas:

            ```c
            char personaje[MAX_JUGADORES][MAX_NOMBRE] = { "Mario", "Luigi", "Peach" };
            int vidas[MAX_JUGADORES] = { 3, 2, 5 };
            ```

            Cada índice representa un jugador:

            - `personaje[0] = "Mario"` y `vidas[0] = 3`
            - `personaje[1] = "Luigi"` y `vidas[1] = 2`
            - `personaje[2] = "Peach"` y `vidas[2] = 5`

            Así sabes que Mario tiene 3 vidas, Luigi tiene 2, etc.

            ---
            ### Booleanos y ternario

            Puedes guardar si una misión está completada:

            ```c
            bool misionCompletada[MAX_MISIONES] = { true, false };
            ```

            Y mostrarlo con el operador ternario:

            ```c
            printf("%s\n", misionCompletada[0] ? "Completada" : "Pendiente");
            ```

            ---
            ### Matriz booleana

            Las matrices permiten representar una cuadrícula.  
            Por ejemplo, casillas de un mapa exploradas o no:

            ```c
            bool mapa[2][3] = {
                { true, false, true },
                { false, true, false }
            };
            ```

            Para mostrar cada casilla:

            ```c
            printf("Fila 0, Col 1: %d\n", mapa[0][1]);
            ```

            ---
            ### Entrada con scanf

            Puedes pedir al jugador que introduzca la salud de dos personajes:

            ```c
            int salud[2];
            printf("Introduce la salud de Link: ");
            scanf("%d", &salud[0]);
            ```

          Pseudocode: |-
            ## Enumerados, cadenas y arrays paralelos (tema: videojuegos)

            Representaremos información de videojuegos como tipos de enemigo, nombres de personajes, vidas y mapas.

            ---
            ### Enumerados

            Se usan para indicar tipos como **enemigos**:

            ```text
            type
              tTipoEnemigo = { ZOMBIE, ALIEN, ROBOT }
            end type
            ```

            Luego puedes guardar enemigos así:

            ```text
            tipoEnemigo[1] := ZOMBIE;
            ```

            ---
            ### Cadenas

            Para guardar nombres como "Mario" o "Peach", se usa un vector de strings:

            ```text
            personaje[1] := "Mario";
            personaje[2] := "Peach";
            ```

            ---
            ### Arrays paralelos

            Puedes guardar nombres y vidas por separado:

            ```text
            personaje[1] := "Mario";
            vidas[1] := 3;

            personaje[2] := "Luigi";
            vidas[2] := 2;
            ```

            Cada índice representa un jugador:

            - personaje[1] = "Mario", vidas[1] = 3
            - personaje[2] = "Luigi", vidas[2] = 2

            Así sabes que Mario tiene 3 vidas, y Luigi tiene 2.

            ---
            ### Booleanos

            Puedes guardar si una misión está completada:

            ```text
            mision[1] := true;
            mision[2] := false;
            ```

            ---
            ### Matriz booleana

            Sirve para representar un mapa con casillas descubiertas o no:

            ```text
            mapa[1][1] := true;
            mapa[1][2] := false;
            ```

            Luego se imprime una casilla con:

            ```text
            writeBoolean(mapa[1][1]);
            ```

            ---
            ### Lectura de datos

            Puedes pedir al jugador que introduzca las vidas:

            ```text
            writeString("Introduce las vidas del jugador 1: ");
            vidas[1] := readInteger();
            ```
        

        questions:
          - id: c-3-enum-declaracion
            language: C
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 3.

              Declara un enumerado tTipoAnimal con los valores PERRO, GATO y AVE.

              Dentro de main, declara un array tipoAnimal de tipo tTipoAnimal inicializado con PERRO, GATO y AVE usando llaves {}.
            answer: |
              #define MAX_ANIMALES 3

              typedef enum {
                  PERRO,
                  GATO,
                  AVE
              } tTipoAnimal;

              int main() {
                  tTipoAnimal tipoAnimal[MAX_ANIMALES] = { PERRO, GATO, AVE };
                  return 0;
              }
            hint: Los enumerativos se inicializan igual que los enteros usando sus etiquetas. No olvides la función main y el return 0.

          - id: p-3-enum-declaracion
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 3.

              Declara el tipo enumerado tTipoAnimal con los valores PERRO, GATO y AVE.

              Dentro del algoritmo principal, declara un array tipoAnimal de tTipoAnimal, inicializado con PERRO, GATO y AVE.
            answer: |
              const
                MAX_ANIMALES: integer = 3;
              end const

              type
                tTipoAnimal = { PERRO, GATO, AVE }
              end type

              algorithm
                var
                  tipoAnimal: vector[MAX_ANIMALES] of tTipoAnimal;
                end var

                tipoAnimal[1] := PERRO;
                tipoAnimal[2] := GATO;
                tipoAnimal[3] := AVE;
              end algorithm
            hint: Enum en pseudocódigo siempre van entre { }.

          - id: c-3-nombres-strncpy
            language: C
            week: 3
            prompt: |
              Incluye string y stdio

              Declara las constantes MAX_ANIMALES = 2 y MAX_NOMBRE = 15.

              Dentro de main, declara dos cadenas de caracteres usando MAX_NOMBRE: nombre1 y nombre2.

              Inicializa nombre1 y nombre2 con "Nina" y "Rocky" respectivamente usando strncpy.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_ANIMALES 2
              #define MAX_NOMBRE 15

              int main() {
                  char nombre1[MAX_NOMBRE];
                  char nombre2[MAX_NOMBRE];
                  strncpy(nombre1, "Nina", MAX_NOMBRE);
                  strncpy(nombre2, "Rocky", MAX_NOMBRE);
                  return 0;
              }
            hint: strncpy(destino, origen, tamaño) para inicializar strings.

          - id: p-3-nombres-strings
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 2.

              Dentro del algoritmo principal, declara un array nombre de strings para dos animales.

              Inicializa nombre[1] con "Nina" y nombre[2] con "Rocky".
            answer: |
              const
                MAX_ANIMALES: integer = 2;
              end const

              algorithm
                var
                  nombre: vector[MAX_ANIMALES] of string;
                end var

                nombre[1] := "Nina";
                nombre[2] := "Rocky";
              end algorithm
            hint:

          - id: c-3-ternario-vacunado
            language: C
            week: 3
            prompt: |
              Incluye stdio y stdbool.
              
              Declara la constante MAX_ANIMALES = 2 y un array booleano vacunado inicializado con true y false con {}.
              
              Imprime usando printf y el operador ternario: "Vacunado" si el primer animal está vacunado, "No vacunado" si no lo está.
              
              Ejemplo de salida: "Vacunado"
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              
              #define MAX_ANIMALES 2
              
              int main() {
                  bool vacunado[MAX_ANIMALES] = { true, false };
                  printf("%s\n", vacunado[0] ? "Vacunado" : "No vacunado");
                  return 0;
              }
            hint: "Recuerda la sintaxis del operador ternario: condicion ? valor_si_true : valor_si_false"

          - id: c-3-arrays-paralelos
            language: C
            week: 3
            prompt: |
              Incluye stdio.
              
              Declara las constantes MAX_ANIMALES = 3 y MAX_NOMBRE = 15.
              
              Dentro de main, declara un array de cadenas de caracteres con MAX_ANIMALES y MAX_NOMBRE y un array de enteros edad con (MAX_ANIMALES).
              
              Inicializa los arrays usando llaves {}, con los nombres "Bobby", "Lili", "Rex" y las edades 2, 5, 3.
              
              Imprime en diferentes líneas cada nombre seguido de la edad, usando printf, en el formato: "Nombre: Bobby, Edad: 2".
            answer: |
              #include <stdio.h>
              
              #define MAX_ANIMALES 3
              #define MAX_NOMBRE 15
              
              int main() {
                  char nombre[MAX_ANIMALES][MAX_NOMBRE] = { "Bobby", "Lili", "Rex" };
                  int edad[MAX_ANIMALES] = { 2, 5, 3 };
                  printf("Nombre: %s, Edad: %d\n", nombre[0], edad[0]);
                  printf("Nombre: %s, Edad: %d\n", nombre[1], edad[1]);
                  printf("Nombre: %s, Edad: %d\n", nombre[2], edad[2]);
                  return 0;
              }
            hint: Cada printf debe estar en una línea diferente y no olvides el salto de linea.

          - id: p-3-arrays-paralelos
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 3.
              
              Dentro del algoritmo principal, declara un array nombre de strings y un array edad de enteros para tres animales.
              
              Inicializa nombre con "Bobby", "Lili", "Rex" y edad con 2, 5, 3.
              
              Imprime el nombre y la edad de cada animal, uno por línea, usando writeString y writeInteger.
              
              Ejemplo de salida:
                Nombre: Bobby
                Edad: 2
                Nombre: Lili
                Edad: 5
                Nombre: Rex
                Edad: 3
            answer: |
              const
                MAX_ANIMALES: integer = 3;
              end const
              
              algorithm
                var
                  nombre: vector[MAX_ANIMALES] of string;
                  edad: vector[MAX_ANIMALES] of integer;
                end var
              
                nombre[1] := "Bobby";
                nombre[2] := "Lili";
                nombre[3] := "Rex";
              
                edad[1] := 2;
                edad[2] := 5;
                edad[3] := 3;
              
                writeString("Nombre: ");
                writeString(nombre[1]);
                writeString("Edad: ");
                writeInteger(edad[1]);
                writeString("Nombre: ");
                writeString(nombre[2]);
                writeString("Edad: ");
                writeInteger(edad[2]);
                writeString("Nombre: ");
                writeString(nombre[3]);
                writeString("Edad: ");
                writeInteger(edad[3]);
              end algorithm
            hint: Cada writeString/writeInteger en su línea.

          - id: c-3-matriz-booleana
            language: C
            week: 3
            prompt: |
              Incluye stdio y stdbool.
              
              Declara las constantes FILAS = 2 y COLUMNAS = 3.
              
              Dentro de main, declara una matriz de booleanos estadoVacuna con FILAS x COLUMNAS e inicialízala manualmente con: 
                fila 0: true, false, true
                fila 1: false, true, false
              
              Imprime el valor de cada casilla en una línea con printf. 
              
              Ejemplo: "Fila 0, Col 0: 1" (donde 1 es true y 0 es false)
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              
              #define FILAS 2
              #define COLUMNAS 3
              
              int main() {
                  bool estadoVacuna[FILAS][COLUMNAS];
                  estadoVacuna[0][0] = true;
                  estadoVacuna[0][1] = false;
                  estadoVacuna[0][2] = true;
                  estadoVacuna[1][0] = false;
                  estadoVacuna[1][1] = true;
                  estadoVacuna[1][2] = false;
              
                  printf("Fila 0, Col 0: %d\n", estadoVacuna[0][0]);
                  printf("Fila 0, Col 1: %d\n", estadoVacuna[0][1]);
                  printf("Fila 0, Col 2: %d\n", estadoVacuna[0][2]);
                  printf("Fila 1, Col 0: %d\n", estadoVacuna[1][0]);
                  printf("Fila 1, Col 1: %d\n", estadoVacuna[1][1]);
                  printf("Fila 1, Col 2: %d\n", estadoVacuna[1][2]);
                  return 0;
              }
            hint: Imprime todos los valores de la matriz, un dato por línea.

          - id: p-3-matriz-booleana
            language: Pseudocode
            week: 3
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.
              
              Dentro del algoritmo principal, declara una matriz booleana estadoVacuna con FILAS x COLUMNAS e inicialízala manualmente con: 
                fila 1: true, false, true
                fila 2: false, true, false
              
              Imprime el valor de cada casilla, uno por línea, usando writeBoolean.
              
              Ejemplo de salida:
                true
                false
                true
                ...
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const
              
              algorithm
                var
                  estadoVacuna: vector[FILAS][COLUMNAS] of boolean;
                end var
              
                estadoVacuna[1][1] := true;
                estadoVacuna[1][2] := false;
                estadoVacuna[1][3] := true;
                estadoVacuna[2][1] := false;
                estadoVacuna[2][2] := true;
                estadoVacuna[2][3] := false;
              
                writeBoolean(estadoVacuna[1][1]);
                writeBoolean(estadoVacuna[1][2]);
                writeBoolean(estadoVacuna[1][3]);
                writeBoolean(estadoVacuna[2][1]);
                writeBoolean(estadoVacuna[2][2]);
                writeBoolean(estadoVacuna[2][3]);
              end algorithm
            hint: Escribe un dato por línea, usando writeBoolean.

          - id: c-3-lee-edad
            language: C
            week: 3
            prompt: |
              Incluye stdio.
              
              Declara la constante MAX_ANIMALES = 2.
              
              Dentro de main, declara un array de enteros edad. 
              
              Pide al usuario que introduzca las edades usando scanf, guardando los valores en el primer y segundo elemento del array.
              
              Usa el siguiente formato:
                "Introduce la edad del animal 1: "
                "Introduce la edad del animal 2: "
            answer: |
              #include <stdio.h>
              
              #define MAX_ANIMALES 2
              
              int main() {
                  int edad[MAX_ANIMALES];
                  printf("Introduce la edad del animal 1: ");
                  scanf("%d", &edad[0]);
                  printf("Introduce la edad del animal 2: ");
                  scanf("%d", &edad[1]);
                  return 0;
              }
            hint: recuerda el especificador de formato de los enteros para leer el dato.

          - id: p-3-lee-edad
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 2.
              
              Dentro del algoritmo principal, declara un array edad de enteros.
              
              Pide al usuario que introduzca las edades con readInteger y guarda los valores en el primer y segundo elemento del array.
            answer: |
              const
                MAX_ANIMALES: integer = 2;
              end const
              
              algorithm
                var
                  edad: vector[MAX_ANIMALES] of integer;
                end var
              
                writeString("Introduce la edad del animal 1: ");
                edad[1] := readInteger();
                writeString("Introduce la edad del animal 2: ");
                edad[2] := readInteger();
              end algorithm
            hint: Lee y guarda cada valor por separado. Los indices empiezan en 1.

      - number: 2
        explanation:
          C: |-
            ## Condicionales: if, else, else if, strcmp, ternario y switch (tema: videojuegos)
            
            En este nivel aprenderás a tomar decisiones en tus programas usando estructuras condicionales.
            
            ---
            ### if
            
            El `if` permite ejecutar una acción si una condición es verdadera.
            
            Por ejemplo, decidir si un Pokémon está en forma para la batalla:
            
            ```c
            int salud;
            printf("Introduce la salud del Pokémon: ");
            scanf("%d", &salud);
            
            if(salud > 50) {
                printf("Listo para luchar\n");
            }
            ```
            
            ---
            ### if...else
            
            Con `else` puedes ejecutar una alternativa si la condición no se cumple.
            
            ```c
            bool tienePocion;
            printf("¿Tienes poción? (1 = sí, 0 = no): ");
            scanf("%d", &tienePocion);
            
            if(tienePocion) {
                printf("Usas la poción\n");
            } else {
                printf("No puedes curarte\n");
            }
            ```
            
            ---
            ### if...else if...else
            
            Para múltiples condiciones, puedes usar `else if`.
            
            ```c
            int nivel;
            printf("Nivel del jugador: ");
            scanf("%d", &nivel);
            
            if(nivel < 5) {
                printf("Novato\n");
            } else if(nivel <= 10) {
                printf("Intermedio\n");
            } else {
                printf("Experto\n");
            }
            ```
            
            ---
            ### strcmp
            
            `strcmp(cadena1, cadena2)` compara dos cadenas. Devuelve 0 si son iguales.
            
            ```c
            char nombre1[10];
            char nombre2[10];
            strncpy(nombre1, "Link", 10);
            strncpy(nombre2, "Zelda", 10);
            
            printf("%s\n", strcmp(nombre1, nombre2) == 0 ? "Mismos personajes" : "Distintos personajes");
            ```
            
            ---
            ### Operador ternario anidado para enums
            
            Puedes convertir un enum a texto usando ternarios:
            
            ```c
            typedef enum { MAGE, WARRIOR, ROGUE } tClase;
            tClase claseJugador = MAGE;
            char claseStr[20];
            
            strncpy(claseStr,
                (claseJugador == MAGE) ? "Mago" :
                (claseJugador == WARRIOR) ? "Guerrero" : "Pícaro",
                20);
            ```
            
            ---
            ### switch
            
            Cuando tienes varios casos posibles para un mismo valor, puedes usar `switch`.
            
            ```c
            int opcion;
            printf("Elige tu clase (1-Mago, 2-Guerrero, 3-Arquero): ");
            scanf("%d", &opcion);
            
            switch(opcion) {
                case 1:
                    printf("Has elegido Mago\n");
                    break;
                case 2:
                    printf("Has elegido Guerrero\n");
                    break;
                case 3:
                    printf("Has elegido Arquero\n");
                    break;
                default:
                    printf("Opción no válida\n");
            }
            ```

          Pseudocode: |-
            ## Condicionales: if, else, else if y switch (tema: videojuegos)
            
            Puedes tomar decisiones según condiciones usando `if`, `else` y `else if`.
            
            ---
            ### if
            
            Ejecuta una acción si se cumple una condición:
            
            ```text
            writeString("Introduce el nivel del personaje: ");
            nivel := readInteger();
            
            if nivel > 10 then
              writeString("Nivel alto");
            end if
            ```
            
            ---
            ### if...else
            
            Ejecuta una alternativa si no se cumple la condición:
            
            ```text
            writeString("¿Tienes espada? (true/false): ");
            tieneEspada := readBoolean();
            
            if tieneEspada then
              writeString("Puedes atacar");
            else
              writeString("Necesitas un arma");
            end if
            ```
            
            ---
            ### if...else if...else
            
            Puedes verificar varias condiciones:
            
            ```text
            writeString("Introduce el nivel del monstruo: ");
            nivel := readInteger();
            
            if nivel < 5 then
              writeString("Fácil");
            else
              if nivel <= 10 then
                writeString("Normal");
              else
                writeString("Difícil");
              end if
            end if
            ```
            
            ---
            ### Comparar cadenas
            
            Puedes usar `=` para comparar strings:
            
            ```text
            nombre[1] := "Mario";
            nombre[2] := "Luigi";
            
            if nombre[1] = nombre[2] then
              writeString("Iguales");
            else
              writeString("Distintos");
            end if
            ```
            
            ---
            ### Convertir enums a texto con if anidado
            
            Puedes usar enums y traducirlos a string:
            
            ```text
            tipo[1] := MAGO;
            
            if tipo[1] = MAGO then
              tipoStr := "Mago";
            else
              if tipo[1] = GUERRERO then
                tipoStr := "Guerrero";
              else
                tipoStr := "Arquero";
              end if
            end if
            ```
            
            ---
            ### switch
            
            Elige una acción según el número introducido por el usuario:
            
            ```text
            writeString("Elige una clase (1-Mago, 2-Guerrero, 3-Arquero): ");
            clase := readInteger();
            
            switch clase
              case 1 then
                writeString("Has elegido Mago");
              end case
              case 2 then
                writeString("Has elegido Guerrero");
              end case
              case 3 then
                writeString("Has elegido Arquero");
              end case
              case default then
                writeString("Opción no válida");
              end case
            end switch
            ```
        

        questions:

          - id: c-3-if-simple
            language: C
            week: 3
            prompt: |
              Incluye stdio.
              
              Dentro de main, declara una variable edad y pídele al usuario que la introduzca.
              
              Usa el formato de pregunta: "Introduce la edad del animal: ".
              
              Usa un if para comprobar si la edad es mayor que 10. Si lo es, imprime "Mayor que 10".
            answer: |
              #include <stdio.h>
              
              int main() {
                  int edad;
              
                  printf("Introduce la edad del animal: ");
                  scanf("%d", &edad);
              
                  if(edad > 10) {
                      printf("Mayor que 10\n");
                  }
              
                  return 0;
              }
            hint: Usa if y no olvides el salto de linea. Recuerda que para leer cualquier dato que no sea un string necesitamos el operador &.

          - id: p-3-if-simple
            language: Pseudocode
            week: 3
            prompt: |
              Dentro del algoritmo principal, declara una variable edad, pide el valor al usuario.
              
              Usa el formato de pregunta: "Introduce la edad del animal: ".
              
              Usa un if para comprobar si la edad es mayor que 10. Si lo es, imprime "Mayor que 10".
            

            answer: |
              
              algorithm
                var
                  edad: integer;
                end var
              
                writeString("Introduce la edad del animal: ");
                edad := readInteger();
              
                if edad > 10 then
                  writeString("Mayor que 10");
                end if
              end algorithm
            hint: No hace falta else.

          - id: c-3-if-else
            language: C
            week: 3
            prompt: |
              Incluye stdio.h.
              
              Dentro de main, declara una variable vacunado (bool) y pide al usuario un número (0 para no vacunado, 1 para vacunado).
              
              Usa un if else para imprimir "Vacunado" o "No vacunado". 
              
              Usa este formato de pregunta: "¿El animal está vacunado? (1 = sí, 0 = no): "
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              
              int main() {
                  bool vacunado;
              
                  printf("¿El animal está vacunado? (1 = sí, 0 = no): ");
                  scanf("%d", &vacunado);
              
                  if(vacunado) {
                      printf("Vacunado\n");
                  } else {
                      printf("No vacunado\n");
                  }
                  return 0;
              }
            hint: El valor 0 es false, 1 es true.

          - id: p-3-if-else
            language: Pseudocode
            week: 3
            prompt: |
              Dentro del algoritmo principal, declara una variable vacunado (boolean).
              
              Pide al usuario que introduzca true o false (usa readBoolean). 
              
              Usa un if else para imprimir "Vacunado" o "No vacunado".
              
              Usa este formato de pregunta: "¿El animal está vacunado? (true/false): "
            answer: |
              algorithm
                var
                  vacunado: boolean;
                end var
              
                writeString("¿El animal está vacunado? (true/false): ");
                vacunado := readBoolean();
              
                if vacunado then
                  writeString("Vacunado");
                else
                  writeString("No vacunado");
                end if
              end algorithm
            hint: Usa readBoolean para leer el dato.

          - id: c-3-compara-strcmp
            language: C
            week: 3
            prompt: |
              Incluye string y stdio.
              
              Declara la constante MAX_NOMBRE = 10.
              
              Dentro de main, declara dos cadenas de caracteres nombre1 y nombre2 inicializados con "Kira" y "Max" usando strncpy.
              
              Usa strcmp para comparar si son iguales. Si lo son, imprime "Nombres iguales", si no, imprime "Nombres diferentes".
            answer: |
              #include <stdio.h>
              #include <string.h>
              
              #define MAX_NOMBRE 10
              
              int main() {
                  char nombre1[MAX_NOMBRE];
                  char nombre2[MAX_NOMBRE];
              
                  strncpy(nombre1, "Kira", MAX_NOMBRE);
                  strncpy(nombre2, "Max", MAX_NOMBRE);
              
                  if(strcmp(nombre1, nombre2) == 0) {
                      printf("Nombres iguales\n");
                  } else {
                      printf("Nombres diferentes\n");
                  }
                  return 0;
              }
            hint: strcmp devuelve 0 si las cadenas son iguales. No olvides los saltos de linea.

          - id: p-3-compara-strings
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 2.
              
              Dentro del algoritmo principal, declara un array nombre de strings para dos animales.
              
              Inicializa nombre[1] con "Kira" y nombre[2] con "Max".
              
              Si los nombres son iguales, imprime "Nombres iguales", si no, imprime "Nombres diferentes".
            answer: |
              const
                MAX_ANIMALES: integer = 2;
              end const
              
              algorithm
                var
                  nombre: vector[MAX_ANIMALES] of string;
                end var
              
                nombre[1] := "Kira";
                nombre[2] := "Max";
              
                if nombre[1] = nombre[2] then
                  writeString("Nombres iguales");
                else
                  writeString("Nombres diferentes");
                end if
              end algorithm
            hint: En pseudocódigo puedes comparar strings con = .


          - id: c-3-if-else-encadenado
            language: C
            week: 3
            prompt: |
              Incluye stdio.
              
              Dentro de main, declara una variable edad y pide al usuario una edad y usa if, else if y else para imprimir:
              - "Joven" si la edad es menor que 5,
              - "Adulto" si es entre 5 y 10 (ambos inclusive),
              - "Senior" si es mayor de 10.
              
              Usa el siguiente formato de pregunta: "Introduce la edad del animal: "
            answer: |
              #include <stdio.h>
              
              int main() {
                  int edad;
              
                  printf("Introduce la edad del animal: ");
                  scanf("%d", &edad);
              
                  if(edad < 5) {
                      printf("Joven\n");
                  } else if(edad <= 10) {
                      printf("Adulto\n");
                  } else {
                      printf("Senior\n");
                  }
                  return 0;
              }
            hint: Usa ifs encadenados. No olvides los saltos de linea.

          - id: p-3-if-else-encadenado
            language: Pseudocode
            week: 3
            prompt: |
              Dentro del algoritmo principal, declara una variable edad, pide una edad al usuario y usa if, else, if anidados para imprimir:
              - "Joven" si la edad es menor que 5,
              - "Adulto" si es entre 5 y 10 (ambos inclusive),
              - "Senior" si es mayor de 10.
              
              Usa el siguiente formato de pregunta: "Introduce la edad del animal: "

            answer: |
              algorithm
                var
                  edad: integer;
                end var
              
                writeString("Introduce la edad del animal: ");
                edad := readInteger();
              
                if edad < 5 then
                  writeString("Joven");
                else
                  if edad <= 10 then
                    writeString("Adulto");
                  else
                    writeString("Senior");
                  end if
                end if
              end algorithm
            hint: Usa if anidados.


          - id: c-3-enum-to-string-ternario
            language: C
            week: 3
            prompt: |
              Incluye string y stdio.

              Declara la constante MAX_ANIMALES = 3

              Declara un enumerado tTipoAnimal con PERRO, GATO y AVE.

              Declara un array tipoAnimal de tTipoAnimal inicializado con PERRO, GATO y AVE usando {}.

              Declara una cadena de caracteres tipoStr de longitud 20 (Usa el valor directo).

              Copia en tipoStr el nombre del primer animal usando strncpy y el operador ternario anidado para convertir el enum a string ("Perro", "Gato" o "Ave").

              Resumiendo, debes guardar el tipo de animal en un formato string. Para convertir el enumerativo en string, usaras el operador ternario.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_ANIMALES 3

              typedef enum {
                  PERRO, GATO, AVE
              } tTipoAnimal;

              int main() {
                  tTipoAnimal tipoAnimal[MAX_ANIMALES] = { PERRO, GATO, AVE };
                  char tipoStr[20];
                  strncpy(tipoStr,
                      (tipoAnimal[0] == PERRO) ? "Perro" :
                      (tipoAnimal[0] == GATO) ? "Gato" : "Ave",
                      20);
                  return 0;
              }
            hint: Usa strncpy siempre y pon el tamaño como tercer parámetro. En el segundo parametro debe ir el operador ternario anidado.

          - id: p-3-enum-to-string-anidado
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_ANIMALES = 3.

              Declara el tipo enumerado tTipoAnimal con PERRO, GATO y AVE.

              Dentro del algoritmo principal, declara un array tipoAnimal de tTipoAnimal inicializado con PERRO, GATO y AVE.

              Declara una variable tipoStr de tipo string.

              Si tipoAnimal[1] es PERRO, tipoStr debe ser "Perro"; si es GATO, "Gato"; si es AVE, "Ave".

              Para lograrlo deberás usar if else if anidados.
            answer: |
              const
                MAX_ANIMALES: integer = 3;
              end const

              type
                tTipoAnimal = { PERRO, GATO, AVE }
              end type

              algorithm
                var
                  tipoAnimal: vector[MAX_ANIMALES] of tTipoAnimal;
                  tipoStr: string;
                end var

                tipoAnimal[1] := PERRO;
                tipoAnimal[2] := GATO;
                tipoAnimal[3] := AVE;

                if tipoAnimal[1] = PERRO then
                  tipoStr := "Perro";
                else
                  if tipoAnimal[1] = GATO then
                    tipoStr := "Gato";
                  else
                    tipoStr := "Ave";
                  end if
                end if
              end algorithm
            hint: Deberas usar if else if... Los anidados son if dentro de else.


          - id: c-3-switch
            language: C
            week: 3
            prompt: |
              Incluye stdio.h.
              
              Dentro de main, crea una variable entera opcion y pide al usuario un entero entre 1 y 3.
              
              Usa el siguiente formato: "Introduce el tipo de animal (1-Perro, 2-Gato, 3-Ave): 1"
              
              Usa switch para imprimir:
                1 → "Perro"
                2 → "Gato"
                3 → "Ave"
                cualquier otro → "Opción inválida"

            answer: |
              #include <stdio.h>
              
              int main() {
                  int opcion;
              
                  printf("Introduce el tipo de animal (1-Perro, 2-Gato, 3-Ave): ");
                  scanf("%d", &opcion);
              
                  switch(opcion) {
                      case 1:
                          printf("Perro\n");
                          break;
                      case 2:
                          printf("Gato\n");
                          break;
                      case 3:
                          printf("Ave\n");
                          break;
                      default:
                          printf("Opción inválida\n");
                  }
                  return 0;
              }
            hint: Usa switch...case...break. Y recuerda los saltos de linea.

          - id: p-3-switch
            language: Pseudocode
            week: 3
            prompt: |
              Dentro del algoritmo principal, crea una variable entera opcion y pide al usuario un entero entre 1 y 3.
              
              Usa el siguiente formato: "Introduce el tipo de animal (1-Perro, 2-Gato, 3-Ave): 1"
              
              Usa switch para imprimir:
                1 → "Perro"
                2 → "Gato"
                3 → "Ave"
                cualquier otro → "Opción inválida"
            answer: |
              algorithm
                var
                  opcion: integer;
                end var
              
                writeString("Introduce el tipo de animal (1-Perro, 2-Gato, 3-Ave): ");
                opcion := readInteger();
              
                switch opcion
                  case 1 then
                    writeString("Perro");
                  end case
                  case 2 then
                    writeString("Gato");
                  end case
                  case 3 then
                    writeString("Ave");
                  end case
                  case default then
                    writeString("Opción inválida");
                  end case
                end switch
              end algorithm
            hint: Recuerda la estructura del switch en pseudocódigo.
              switch
              case    then
              end case

              case default then
              end case
              end switch

      - number: 3
        explanation:
          C: |-
            ## Bucles y recorridos (tema: videojuegos)

            Esta semana aprenderás a repetir instrucciones usando bucles `for`, `while` y `do while`, para recorrer arrays y matrices relacionados con videojuegos.

            ---
            ### Bucle `for` básico

            El `for` sirve para repetir una acción un número fijo de veces.  
            Ejemplo: mostrar los primeros 10 niveles de un personaje:

            ```c
            #define MAX_NIVELES 10

            int i;
            for(i = 0; i < MAX_NIVELES; i++) {
                printf("%d\n", i);
            }
            ```

            ---
            ### Recorrer un array con `for`

            Puedes recorrer un array de puntos de experiencia ganados en misiones:

            ```c
            #define MAX_MISIONES 4

            int experiencia[MAX_MISIONES] = {150, 300, 200, 400};
            int i;

            for(i = 0; i < MAX_MISIONES; i++) {
                printf("%d\n", experiencia[i]);
            }
            ```

            ---
            ### Leer datos en un array con `for`

            Puedes usar `scanf` en un bucle para leer datos del usuario:  
            Por ejemplo, tiempo que tardó en cada misión:

            ```c
            float tiempo[3];
            int i;

            for(i = 0; i < 3; i++) {
                printf("Tiempo en misión %d: ", i + 1);
                scanf("%f", &tiempo[i]);
            }
            ```

            ---
            ### `while` y `do while`

            - `while` se ejecuta mientras se cumpla una condición.
            - `do while` se ejecuta al menos una vez.

            ```c
            int i = 0;
            while(i < 5) {
                printf("%d\n", i);
                i++;
            }

            i = 0;
            do {
                printf("%d\n", i);
                i++;
            } while(i < 5);
            ```

            ---
            ### Suma de elementos en un array

            Puedes sumar los puntos conseguidos en varios niveles:

            ```c
            int puntos[4] = {10, 20, 30, 40};
            int suma = 0;
            int i;

            for(i = 0; i < 4; i++) {
                suma += puntos[i];
            }

            printf("Total: %d\n", suma);
            ```

            ---
            ### strncpy en bucle

            Puedes copiar nombres de enemigos usando un bucle y `strncpy`:

            ```c
            #define MAX 3
            #define MAX_NOMBRE 12

            char enemigos[MAX][MAX_NOMBRE];
            char nombresBase[MAX][MAX_NOMBRE] = {"Goblin", "Orco", "Troll"};
            int i;

            for(i = 0; i < MAX; i++) {
                strncpy(enemigos[i], nombresBase[i], MAX_NOMBRE);
            }
            ```

            ---
            ### Recorrer matrices

            Puedes recorrer mapas, inventarios o zonas con bucles anidados:

            ```c
            int mapa[2][3] = {
                {1, 0, 1},
                {0, 1, 0}
            };
            int i, j;

            for(i = 0; i < 2; i++) {
                for(j = 0; j < 3; j++) {
                    printf("%d ", mapa[i][j]);
                }
                printf("\n");
            }
            ```

            ---
            ### Suma de una matriz

            Para sumar el daño de cada ataque en un campo de batalla:

            ```c
            int daño[2][2] = {
                {5, 3},
                {7, 1}
            };
            int suma = 0;
            int i, j;

            for(i = 0; i < 2; i++) {
                for(j = 0; j < 2; j++) {
                    suma += daño[i][j];
                }
            }

            printf("Daño total: %d\n", suma);
            ```

          Pseudocode: |-
            ## Bucles y recorridos (tema: videojuegos)

            Usaremos bucles `for`, `while` y `do while` para recorrer arrays y matrices que representan datos del juego, como niveles, experiencia, o daño.

            ---
            ### Bucle `for` básico

            Puedes repetir una acción varias veces:  
            Por ejemplo, mostrar niveles del 1 al 10:

            ```text
            for i := 1 to 10 do
              writeInteger(i);
            end for
            ```

            ---
            ### Recorrer un array

            Guardamos la experiencia ganada en cada misión:

            ```text
            experiencia[1] := 150;
            experiencia[2] := 300;
            experiencia[3] := 200;
            experiencia[4] := 400;
            ```

            Luego la mostramos:

            ```text
            for i := 1 to 4 do
              writeInteger(experiencia[i]);
            end for
            ```

            ---
            ### Leer un array con for

            Tiempo que tardó el jugador en completar misiones:

            ```text
            for i := 1 to 3 do
              writeString("Tiempo misión ");
              writeInteger(i);
              writeString(": ");
              tiempo[i] := readReal();
            end for
            ```

            ---
            ### Bucles `while` y `do while`

            Se usan para repetir mientras se cumpla una condición.

            ```text
            i := 1;
            while i <= 5 do
              writeInteger(i);
              i := i + 1;
            end while
            ```

            ```text
            i := 1;
            do
              writeInteger(i);
              i := i + 1;
            while i <= 5;
            ```

            ---
            ### Sumar los puntos obtenidos

            ```text
            puntos[1] := 10;
            puntos[2] := 20;
            puntos[3] := 30;
            puntos[4] := 40;
            suma := 0;

            for i := 1 to 4 do
              suma := suma + puntos[i];
            end for

            writeString("Total: ");
            writeInteger(suma);
            ```

            ---
            ### Imprimir nombres

            Puedes recorrer un array de nombres como "Goblin", "Orco", "Troll":

            ```text
            enemigos[1] := "Goblin";
            enemigos[2] := "Orco";
            enemigos[3] := "Troll";

            for i := 1 to 3 do
              writeString(enemigos[i]);
            end for
            ```

            ---
            ### Matrices

            Para representar casillas del mapa:

            ```text
            mapa[1][1] := 1;
            mapa[1][2] := 0;
            mapa[1][3] := 1;
            mapa[2][1] := 0;
            mapa[2][2] := 1;
            mapa[2][3] := 0;
            ```

            Luego puedes imprimir con dos bucles:

            ```text
            for i := 1 to 2 do
              for j := 1 to 3 do
                writeInteger(mapa[i][j]);
              end for
            end for
            ```

            ---
            ### Sumar los valores de una matriz

            Por ejemplo, daño total recibido en zonas del mapa:

            ```text
            daño[1][1] := 5;
            daño[1][2] := 3;
            daño[2][1] := 7;
            daño[2][2] := 1;
            suma := 0;

            for i := 1 to 2 do
              for j := 1 to 2 do
                suma := suma + daño[i][j];
              end for
            end for

            writeString("Daño total: ");
            writeInteger(suma);
            ```

        questions:
          - id: c-3-for-indice-basico
            language: C
            week: 3
            prompt: |
              Incluye stdio.h.

              Declara la constante MAXIMO = 10.

              Dentro de main, declara una variable i.

              Utiliza un bucle for para que i tome valores de 0 a 9, ambos incluidos, e imprime el valor de i en cada iteración.

              La salida debe ser una línea por número, ejemplo:
                0
                1
                2
                ...
                9
            answer: |
              #include <stdio.h>
              #define MAXIMO 10

              int main() {
                  int i;

                  for(i = 0; i < MAXIMO; i++) {
                      printf("%d\n", i);
                  }
                  return 0;
              }
            hint: "El for clásico en C es: for(inicio; condicion; incremento)"

          - id: p-3-for-indice-basico
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAXIMO = 10.

              Dentro del algoritmo principal, declara una variable i.

              Utiliza un bucle for para que i tome valores de 1 a MAXIMO e imprime el valor de i en cada iteración.

              La salida debe ser una línea por número del 1 al 10. Ejemplo
              1
              2
              3
              ...
              10

            answer: |
              const
                MAXIMO: integer = 10;
              end const

              algorithm
                var
                  i: integer;
                end var

                for i := 1 to MAXIMO do
                  writeInteger(i);
                end for
              end algorithm
            hint: En pseudocódigo los arrays y los índices empiezan en 1.

          - id: c-3-for-array-imprimir
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara la constante MAX_DATOS = 4.

              Dentro de main, declara un array de enteros datos con MAX_DATOS inicializado con a 7, 2, 5, 8 usando { }.

              Usa un bucle for para imprimir cada dato, uno por línea. Necesitaras una variable i.

              Ejemplo de ejecución:
                7
                2
                5
                8
            answer: |
              #include <stdio.h>
              #define MAX_DATOS 4

              int main() {
                  int datos[MAX_DATOS] = {7, 2, 5, 8};
                  int i;
                  for(i = 0; i < MAX_DATOS; i++) {
                      printf("%d\n", datos[i]);
                  }
                  return 0;
              }
            hint: Recuerda que los arrays en C empiezan en 0.

          - id: p-3-for-array-imprimir
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX_DATOS = 4.

              Dentro del algoritmo principal, declara un array de enteros datos con MAX_DATOS.

              Inicialízalo a mano con los valores 7, 2, 5, 8.

              Usa un bucle for para imprimir cada dato, uno por línea. Necesitarás una variable i.

              Ejemplo de ejecución:
                7
                2
                5
                8
            answer: |
              const
                MAX_DATOS: integer = 4;
              end const

              algorithm
                var
                  datos: vector[MAX_DATOS] of integer;
                  i: integer;
                end var

                datos[1] := 7;
                datos[2] := 2;
                datos[3] := 5;
                datos[4] := 8;

                for i := 1 to MAX_DATOS do
                  writeInteger(datos[i]);
                end for
              end algorithm
            hint: El índice comienza en 1 en pseudocódigo.

          - id: c-3-for-leer-array
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara la constante MAXIMO = 3.

              Dentro de main, declara un array de decimales valores con MAXIMO.

              Usa un bucle for para pedir al usuario que ingrese 3 decimales y guardarlos en el array.

              Necesitarás una variable i para usar de iterador.

              Luego imprime los valores, uno por línea utilizando otro for.

              Ejemplo de ejecución:
                Ingresa valor 1: 3.2
                Ingresa valor 2: 1.0
                Ingresa valor 3: 4.8
                3.2
                1.0
                4.8
            answer: |
              #include <stdio.h>
              #define MAXIMO 3

              int main() {
                  float valores[MAXIMO];
                  int i;
                  for(i = 0; i < MAXIMO; i++) {
                      printf("Ingresa valor %d: ", i+1);
                      scanf("%f", &valores[i]);
                  }
                  for(i = 0; i < MAXIMO; i++) {
                      printf("%.1f\n", valores[i]);
                  }
                  return 0;
              }
            hint: Usa dos bucles for, uno para leer y otro para imprimir. Imprime los valores con 1 solo decimal.

          - id: p-3-for-leer-array
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAXIMO = 3.

              Dentro del algoritmo principal, declara un array de reales valores con MAXIMO.

              Usa un bucle for para leer 3 decimales del usuario y guardarlos en el array.

              Necesitarás una variable i para usar de iterador.

              Luego usa otro bucle for para imprimir los valores, uno por línea.

              Ejemplo de ejecución:
                Ingresa valor 1: 3.2
                Ingresa valor 2: 1.0
                Ingresa valor 3: 4.8
                3.2
                1.0
                4.8

              El numero seguido de valor toma el valor del indice en cada iteración.
            answer: |
              const
                MAXIMO: integer = 3;
              end const

              algorithm
                var
                  valores: vector[MAXIMO] of real;
                  i: integer;
                end var

                for i := 1 to MAXIMO do
                  writeString("Ingresa valor ");
                  writeInteger(i);
                  writeString(": ");
                  valores[i] := readReal();
                end for

                for i := 1 to MAXIMO do
                  writeReal(valores[i]);
                end for
              end algorithm
            hint: Usa dos bucles for, uno para leer y otro para imprimir. Recuerda que en pseudocodigo debes imprimir los datos en diferentes lineas.



          - id: c-3-while-indice-basico
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara la constante MAXIMO = 10.

              Dentro de main, declara una variable i inicializada a 0.

              Utiliza un bucle while para imprimir el valor de i mientras i sea menor que MAXIMO.

              La salida debe ser una línea por número, del 0 al 9.
            answer: |
              #include <stdio.h>
              #define MAXIMO 10

              int main() {
                  int i = 0;
                  while(i < MAXIMO) {
                      printf("%d\n", i);
                      i++;
                  }
                  return 0;
              }
            hint: Recuerda inicializar i antes del while e incrementarla antes de finalizar cada iteración para no crear un bucle infinito.

          - id: p-3-while-indice-basico
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAXIMO = 10.

              Dentro del algoritmo principal, declara una variable i inicializada a 1.

              Usa un bucle while para imprimir el valor de i mientras i sea menor o igual que MAXIMO.

              La salida debe ser una línea por número del 1 al 10.
            answer: |
              const
                MAXIMO: integer = 10;
              end const

              algorithm
                var
                  i: integer;
                end var

                i := 1;
                while i <= MAXIMO do
                  writeInteger(i);
                  i := i + 1;
                end while
              end algorithm
            hint: En pseudocódigo los índices empiezan en 1 y se incrementan manualmente. No olvides incrementar el indice.



          - id: c-3-do-while-indice-basico
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara la constante MAXIMO = 10.

              Dentro de main, declara una variable i inicializada a 0.

              Usa un bucle do while para imprimir el valor de i mientras i sea menor que MAXIMO.

              La salida debe ser una línea por número, del 0 al 9.
            answer: |
              #include <stdio.h>
              #define MAXIMO 10

              int main() {
                  int i = 0;
                  do {
                      printf("%d\n", i);
                      i++;
                  } while(i < MAXIMO);
                  return 0;
              }
            hint: El cuerpo de do while siempre se ejecuta al menos una vez. No olvides el salto de linea en el print.

          - id: p-3-do-while-indice-basico
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAXIMO = 10.

              Dentro del algoritmo principal, declara una variable e inicializala a 1.

              Usa un bucle do while para imprimir el valor de i mientras i sea menor o igual que MAXIMO.

              La salida debe ser una línea por número del 1 al 10.
            answer: |
              const
                MAXIMO: integer = 10;
              end const

              algorithm
                var
                  i: integer;
                end var

                i := 1;
                do
                  writeInteger(i);
                  i := i + 1;
                while i <= MAXIMO;
              end algorithm
            hint: En pseudocódigo los índices empiezan en 1.

          - id: c-3-for-suma-array
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara la constante MAX = 4.

              Dentro de main, declara un array de enteros valores con MAX inicializado a 1, 2, 3, 4 usando { }.

              Declara una variable suma para almacenar la suma de todos los elementos del array e inicializala en 0.

              También necesitarás una variable i para utilizar en el bucle.

              Usa un bucle for para calcular la suma de todos los elementos y al final imprime el resultado así:

              Suma: x

              Para la suma utiliza el operador compuesto.

              Ejemplo de ejecución:
                Suma: 10
            answer: |
              #include <stdio.h>
              #define MAX 4

              int main() {
                  int valores[MAX] = {1, 2, 3, 4};
                  int suma = 0;
                  int i;
                  for(i = 0; i < MAX; i++) {
                      suma += valores[i];
                  }
                  printf("Suma: %d\n", suma);
                  return 0;
              }
            hint: Acumula la suma con suma += . Imprime el resultado fuera del bucle y no olvides el salto de linea.

          - id: p-3-for-suma-array
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX = 4.

              Declara un array de enteros valores con MAX.

              Inicialízalo a mano con los valores 1, 2, 3, 4.

              Declara una variable suma para almacenar la suma de todos los elementos del array e inicializala en 0.

              También necesitarás una variable i para utilizar en el bucle.

              Usa un bucle for para calcular la suma de todos los elementos y al final imprime el resultado así:

              Suma: x

              Ejemplo de ejecución:
                Suma: 10
            answer: |
              const
                MAX: integer = 4;
              end const

              algorithm
                var
                  valores: vector[MAX] of integer;
                  suma: integer;
                  i: integer;
                end var

                valores[1] := 1;
                valores[2] := 2;
                valores[3] := 3;
                valores[4] := 4;
                suma := 0;

                for i := 1 to MAX do
                  suma := suma + valores[i];
                end for

                writeString("Suma: ");
                writeInteger(suma);
              end algorithm
            hint: Recuerda inicializar suma a 0. Imprime el resultado fuera del bucle. Los indices empiezan en 1.

          - id: c-3-for-strncpy-paralelo
            language: C
            week: 3
            prompt: |
              Incluye stdio y string.

              Declara la constante MAX = 3 y MAX_NOMBRE = 12.

              Dentro de main, declara un array de cadenas nombres con MAX y MAX_NOMBRE.

              Declara otro array de cadenas ejemplos con MAX y MAX_NOMBRE e inicializalo con los siguientes nombres usando { }: 
              Ana", "Luis" y "Eva"

              Declara una variable i para utilizar en los bucles.

              Usa strncpy para inicializar los nombres con "Ana", "Luis" y "Eva" usando un bucle for.

              Después, imprime cada nombre, uno por línea con otro bucle for.

              Ejemplo de ejecución:
                Ana
                Luis
                Eva
            answer: |
              #include <stdio.h>
              #include <string.h>
              #define MAX 3
              #define MAX_NOMBRE 12

              int main() {
                  char nombres[MAX][MAX_NOMBRE];
                  char ejemplos[MAX][MAX_NOMBRE]; = {"Ana", "Luis", "Eva"};
                  int i;
                  for(i = 0; i < MAX; i++) {
                      strncpy(nombres[i], ejemplos[i], MAX_NOMBRE);
                  }
                  for(i = 0; i < MAX; i++) {
                      printf("%s\n", nombres[i]);
                  }
                  return 0;
              }
            hint: Usa strncpy(destino, origen, tamaño).

          - id: p-3-for-array-paralelo
            language: Pseudocode
            week: 3
            prompt: |
              Declara la constante MAX = 3.

              Declara un array de strings nombres con MAX.

              Inicialízalos a mano como "Ana", "Luis" y "Eva".

              Usa un bucle for para imprimir cada nombre, uno por línea.

              Ejemplo de ejecución:
                Ana
                Luis
                Eva
            answer: |
              const
                MAX: integer = 3;
              end const

              algorithm
                var
                  nombres: vector[MAX] of string;
                  i: integer;
                end var

                nombres[1] := "Ana";
                nombres[2] := "Luis";
                nombres[3] := "Eva";

                for i := 1 to MAX do
                  writeString(nombres[i]);
                end for
              end algorithm
            hint: Los índices empiezan en 1.

          - id: c-3-for-matriz-manual
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Dentro de main, declara una matriz de enteros tabla con FILAS x COLUMNAS e inicialízala manualmente usando asignaciones.

              Declara dos variables i j para utilizar en los bucles.

              Asigna manualmente los valores siguientes:
                fila 1: 2, 4, 6
                fila 2: 1, 3, 5

              Usa dos bucles for anidados para imprimir la matriz como una tabla.

              Después de cada bucle interno, imprime un salto de linea para lograr el output facilitado.

              Ejemplo de ejecución:
                2 4 6
                1 3 5
            answer: |
              #include <stdio.h>
              #define FILAS 2
              #define COLUMNAS 3

              int main() {
                  int tabla[FILAS][COLUMNAS];
                  int i, j;

                  tabla[0][0] = 2; 
                  tabla[0][1] = 4; 
                  tabla[0][2] = 6;
                  tabla[1][0] = 1; 
                  tabla[1][1] = 3; 
                  tabla[1][2] = 5;

                  for(i = 0; i < FILAS; i++) {
                      for(j = 0; j < COLUMNAS; j++) {
                          printf("%d ", tabla[i][j]);
                      }
                      printf("\n");
                  }
                  return 0;
              }
            hint: Inicializa cada elemento manualmente.

          - id: p-3-for-matriz-manual
            language: Pseudocode
            week: 3
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 3.

              Declara una matriz de enteros tabla con FILAS x COLUMNAS.

              Declara dos variables i j para utilizar en los bucles.

              Asigna manualmente los valores:
                fila 1: 2, 4, 6
                fila 2: 1, 3, 5

              Usa dos bucles for anidados para imprimir la matriz como una tabla.

              Ejemplo de ejecución:
                2 4 6
                1 3 5
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const

              algorithm
                var
                  tabla: vector[FILAS][COLUMNAS] of integer;
                  i: integer;
                  j: integer;
                end var

                tabla[1][1] := 2; 
                tabla[1][2] := 4; 
                tabla[1][3] := 6;
                tabla[2][1] := 1; 
                tabla[2][2] := 3; 
                tabla[2][3] := 5;

                for i := 1 to FILAS do
                  for j := 1 to COLUMNAS do
                    writeInteger(tabla[i][j]);
                  end for
                end for
              end algorithm
            hint: Los bucles anidados recorren filas y columnas.

          - id: c-3-for-matriz-inicializa-llaves
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara las constantes FILAS = 2 y COLUMNAS = 2.

              Dentro de main, declara una matriz de decimales temp con FILAS x COLUMNAS e inicialízala con { } con los valores:
                22.1, 18.3 y 19.5, 20.0 (fila1 y fila2)

              Declara dos variables i j para utilizar en los bucles.

              Usa dos bucles for anidados para imprimir cada valor con un decimal, uno por línea.

              Ejemplo de ejecución:
                22.1
                18.3
                19.5
                20.0
            answer: |
              #include <stdio.h>
              #define FILAS 2
              #define COLUMNAS 2

              int main() {
                  float temp[FILAS][COLUMNAS] = {
                      {22.1, 18.3},
                      {19.5, 20.0}
                  };
                  int i, j;
                  for(i = 0; i < FILAS; i++) {
                      for(j = 0; j < COLUMNAS; j++) {
                          printf("%.1f\n", temp[i][j]);
                      }
                  }
                  return 0;
              }
            hint: Usa inicialización con llaves y no olvides el salto de linea.

          - id: p-3-for-matriz-inicializa-manual
            language: Pseudocode
            week: 3
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 2.

              Declara una matriz de reales temp con FILAS x COLUMNAS.

              Asigna manualmente los valores:
                22.1, 18.3 y 19.5,20.0 (fila1 y fila2)

              Declara dos variables i j para utilizar en los bucles.

              Usa dos bucles for anidados para imprimir cada valor, uno por línea.

              Ejemplo de ejecución:
                22.1
                18.3
                19.5
                20.0
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 2;
              end const

              algorithm
                var
                  temp: vector[FILAS][COLUMNAS] of real;
                  i: integer;
                  j: integer;
                end var

                temp[1][1] := 22.1;
                temp[1][2] := 18.3;
                temp[2][1] := 19.5;
                temp[2][2] := 20.0;

                for i := 1 to FILAS do
                  for j := 1 to COLUMNAS do
                    writeReal(temp[i][j]);
                  end for
                end for
              end algorithm
            hint: En pseudocódigo la inicialización es manual.

          - id: c-3-for-suma-matriz
            language: C
            week: 3
            prompt: |
              Incluye stdio.

              Declara las constantes FILAS = 2 y COLUMNAS = 2.

              Dentro de main, declara una matriz de enteros tabla con FILAS x COLUMNAS inicializada con (3, 1) y (5, 2).

              Declara una variable suma e inicializala en 0.

              Declara dos variables i, j en la misma linea para utilizar en los bucles.

              Usa dos bucles for anidados para calcular la suma de todos los elementos y luego imprime:

              Suma: x

              La suma realizala con operador compuesto.

              Ejemplo de ejecución:
                Suma: 11
            answer: |
              #include <stdio.h>
              #define FILAS 2
              #define COLUMNAS 2

              int main() {
                  int tabla[FILAS][COLUMNAS] = {
                      {3, 1},
                      {5, 2}
                  };
                  int suma = 0;
                  int i, j;
                  for(i = 0; i < FILAS; i++) {
                      for(j = 0; j < COLUMNAS; j++) {
                          suma += tabla[i][j];
                      }
                  }
                  printf("Suma: %d\n", suma);
                  return 0;
              }
            hint: Suma con suma += tabla[i][j].

          - id: p-3-for-suma-matriz
            language: Pseudocode
            week: 3
            prompt: |
              Declara las constantes FILAS = 2 y COLUMNAS = 2.

              Dentro del algoritmo principal, declara una matriz de enteros tabla con FILAS x COLUMNAS inicializada con (3, 1) y (5, 2).

              Declara una variable suma e inicializala en 0.

              Declara dos variables i, j para utilizar en los bucles.

              Usa dos bucles for anidados para calcular la suma de todos los elementos y luego imprime:

              Suma: x

              Ejemplo de ejecución:
                Suma: 11
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 2;
              end const

              algorithm
                var
                  tabla: vector[FILAS][COLUMNAS] of integer;
                  suma: integer;
                  i: integer;
                  j: integer;
                end var

                tabla[1][1] := 3;
                tabla[1][2] := 1;
                tabla[2][1] := 5;
                tabla[2][2] := 2;
                suma := 0;

                for i := 1 to FILAS do
                  for j := 1 to COLUMNAS do
                    suma := suma + tabla[i][j];
                  end for
                end for

                writeString("Suma: ");
                writeInteger(suma);
              end algorithm
            hint: Los indices empiezan en 1. Primero declara y luego inicializa

  - number: 4
    explanation: |
      Explicación de semana 4
    levels:
      - number: 1
        explanation:
          C: |
            En este nivel aprenderás a declarar y utilizar `structs` para representar datos complejos como una atracción de un parque, además de cómo declarar arrays de structs y acceder a sus campos.
            
            ### ¿Qué es un `struct`?
            
            Un `struct` permite agrupar múltiples variables relacionadas bajo un solo nombre. Es ideal para representar entidades de videojuegos como personajes, ítems o atracciones.
            
            ```c
            typedef struct {
                char nombre[30];
                int duracionMinutos;
                float alturaMinima;
            } tAtraccion;
            ```
            
            Esto define un nuevo tipo `tAtraccion` con 3 campos.
            
            ### Declarar una variable de tipo struct
            
            ```c
            tAtraccion torreCaida;
            ```
            
            ### Asignar valores a los campos
            
            Para campos `char[]`, usamos `strncpy`:
            
            ```c
            strncpy(torreCaida.nombre, "Torre de Caída", 30);
            torreCaida.duracionMinutos = 3;
            torreCaida.alturaMinima = 1.40;
            ```
            
            ### Array de structs
            
            Puedes declarar un array de structs para almacenar varias atracciones:
            
            ```c
            #define MAX_ATRACCIONES 3
            tAtraccion atracciones[MAX_ATRACCIONES];
            ```
            
            Para acceder al nombre de la primera atracción:
            
            ```c
            atracciones[0].nombre
            ```
            
            ### Relación entre arrays paralelos
            
            Supón que tienes un array de `tAtraccion` y otro array con el número de visitantes. Si el índice es el mismo, representan datos del mismo objeto:
            
            ```c
            strncpy(atracciones[1].nombre, "Looping", 30);
            visitantes[1] = 1234;
            ```
            
            Aquí el índice `1` se refiere a la misma atracción.

          Pseudocode: |
            En este nivel aprenderás a utilizar `record` para representar datos compuestos, como atracciones, y cómo trabajar con arrays de registros.
            
            ### ¿Qué es un `record`?
            
            Un `record` es como una caja que contiene distintos datos relacionados. Sirve para representar entidades como enemigos, jefes o atracciones de parque.
            
            ```pseudocode
            type
              tAtraccion = record
                nombre: string;
                duracionMinutos: integer;
                alturaMinima: real;
              end record
            end type
            ```
            
            ### Declarar una variable de tipo record
            
            ```pseudocode
            var
              torreCaida: tAtraccion;
            end var
            ```
            
            ### Asignar valores a los campos
            
            ```pseudocode
            torreCaida.nombre := "Torre de Caída";
            torreCaida.duracionMinutos := 3;
            torreCaida.alturaMinima := 1.40;
            ```
            
            ### Array de structs
            
            ```pseudocode
            const
              MAX_ATRACCIONES: integer = 3;
            end const
            
            var
              parque: vector[MAX_ATRACCIONES] of tAtraccion;
            end var
            ```
            
            Para acceder al campo de la primera atracción:
            
            ```pseudocode
            parque[1].nombre
            ```
            
            ### Relación entre arrays paralelos
            
            Si tienes un array `parque` y otro array llamado `visitantes`, puedes almacenar información relacionada en la misma posición:
            
            ```pseudocode
            parque[2].nombre := "Tazas locas";
            parque[2].duracionMinutos := 4;
            parque[2].alturaMinima := 1.10;
            
            visitantes[2] := 300;
            ```
            
            Aquí, el índice 2 representa los datos de la misma atracción.
        questions:
          - id: c-4-atraccion-basica
            language: C
            week: 4
            prompt: |
              Crea un tipo de dato llamado tAtraccion para una atracción de parque con los siguientes campos exactos:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por la constante MAX_NOMBRE (valor 30).
              - Un número decimal llamado alturaMinima.
              - Un valor lógico llamado enMantenimiento.

              Declara una variable llamada atraccion1 de tipo tAtraccion dentro de la función main.
            answer: |
              #include <stdbool.h>

              #define MAX_NOMBRE 30

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  float alturaMinima;
                  bool enMantenimiento;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  return 0;
              }
            hint: Declara primero la constante, luego el typedef del struct y por último la variable atraccion1 dentro de main. No olvides la biblioteca de booleanos

          - id: p-4-atraccion-basica
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo de dato llamado tAtraccion para una atracción de parque con los siguientes campos exactos:
              - Un texto llamado nombre.
              - Un número real llamado alturaMinima.
              - Un valor booleano llamado enMantenimiento.

              Declara una variable llamada atraccion1 de tipo tAtraccion dentro del bloque principal.
            answer: |
              type
                tAtraccion = record
                  nombre: string;
                  alturaMinima: real;
                  enMantenimiento: boolean;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var
              end algorithm
            hint: En pseudocódigo no se especifica el tamaño del texto; usa string.

          - id: c-4-atraccion-con-tipo
            language: C
            week: 4
            prompt: |
              Crea un tipo enumerado llamado tTipoAtraccion con los valores MONTANA_RUSA, CARRUSEL y SIMULADOR.
              Crea un tipo tAtraccion con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por la constante MAX_NOMBRE (valor 30).
              - Un campo llamado tipo de tipo tTipoAtraccion.

              Declara una variable llamada atraccion1 de tipo tAtraccion dentro de la función main.
            answer: |
              #define MAX_NOMBRE 30

              typedef enum {
                  MONTANA_RUSA,
                  CARRUSEL,
                  SIMULADOR
              } tTipoAtraccion;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tTipoAtraccion tipo;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  return 0;
              }
            hint: Declara primero la constante, luego el typedef del enum y luego el typedef del struct que lo usa.

          - id: p-4-atraccion-con-tipo
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo enumerado llamado tTipoAtraccion con los valores MONTANA_RUSA, CARRUSEL y SIMULADOR.
              Crea un tipo tAtraccion con:
              - Un texto llamado nombre.
              - Un campo llamado tipo de tipo tTipoAtraccion.

              Declara una variable llamada atraccion1 de tipo tAtraccion dentro del bloque principal.
            answer: |
              type
                tTipoAtraccion = { MONTANA_RUSA, CARRUSEL, SIMULADOR }
              end type

              type
                tAtraccion = record
                  nombre: string;
                  tipo: tTipoAtraccion;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var
              end algorithm
            hint: Declara el tipo enumerado antes del record que lo utiliza utiliza dos bloques type diferentes.

          - id: c-4-atracciones-lista
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (30) y MAX_ATRACCIONES (5).

              Crea un tipo tAtraccion con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 30).
              - Un número entero llamado capacidadMaxima.

              Dentro de la función principal, declara un array llamado lista de tipo tAtraccion con MAX_ATRACCIONES elementos.
            answer: |
              #define MAX_NOMBRE 30
              #define MAX_ATRACCIONES 5

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  int capacidadMaxima;
              } tAtraccion;

              int main() {
                  tAtraccion lista[MAX_ATRACCIONES];
                  return 0;
              }
            hint: Las constantes deben definirse antes del typedef del struct.

          - id: p-4-atracciones-lista
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 5.

              Crea un tipo tAtraccion con:
              - Un texto llamado nombre.
              - Un número entero llamado capacidadMaxima.

              En el bloque principal, declara un array llamado lista de tipo tAtraccion con MAX_ATRACCIONES elementos.
            answer: |
              const
                MAX_ATRACCIONES: integer = 5;
              end const

              type
                tAtraccion = record
                  nombre: string;
                  capacidadMaxima: integer;
                end record
              end type

              algorithm
                var
                  lista: vector[MAX_ATRACCIONES] of tAtraccion;
                end var
              end algorithm
            hint: Usa vector[MAX_ATRACCIONES] of tAtraccion para el array de registros.

          - id: c-4-atraccion-horario
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_HORA (6) y MAX_NOMBRE (30).
              
              Crea un tipo tHorario con:
              - Una cadena de caracteres llamada apertura con tamaño máximo definido por MAX_HORA (valor 6).
              - Una cadena de caracteres llamada cierre con tamaño máximo definido por MAX_HORA (valor 6).

              Crea un tipo tAtraccion con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 30).
              - Un campo llamado horario de tipo tHorario.

              
              Declara dentro de main una variable llamada atraccion1 de tipo tAtraccion.
            answer: |
              #define MAX_HORA 6
              #define MAX_NOMBRE 30

              typedef struct {
                  char apertura[MAX_HORA];
                  char cierre[MAX_HORA];
              } tHorario;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tHorario horario;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  return 0;
              }
            hint: Los structs anidados se declaran con un typedef para cada tipo.

          - id: p-4-atraccion-horario
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo tHorario con:
              - Un texto llamado apertura.
              - Un texto llamado cierre.

              Crea un tipo tAtraccion con:
              - Un texto llamado nombre.
              - Un campo llamado horario de tipo tHorario.

              Declara una variable llamada atraccion1 de tipo tAtraccion en el bloque principal.
            answer: |
              type
                tHorario = record
                  apertura: string;
                  cierre: string;
                end record
              
                tAtraccion = record
                  nombre: string;
                  horario: tHorario;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var
              end algorithm
            hint: Declara primero tHorario y luego úsalo como campo en tAtraccion, usa un solo bloque type.

          - id: c-4-ficha-seguridad
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 30.

              Crea un tipo tFichaSeguridad con:
              - Una cadena de caracteres llamada inspector con tamaño máximo definido por MAX_NOMBRE (valor 30).
              - Un número decimal llamado puntaje.
              - Un valor lógico llamado aprobada.

              Declara dentro de main una variable llamada ficha1 de tipo tFichaSeguridad.
            answer: |
              #include <stdbool.h>

              #define MAX_NOMBRE 30

              typedef struct {
                  char inspector[MAX_NOMBRE];
                  float puntaje;
                  bool aprobada;
              } tFichaSeguridad;

              int main() {
                  tFichaSeguridad ficha1;
                  return 0;
              }
            hint: Recuerda incluir <stdbool.h> cuando uses bool en C.

          - id: p-4-ficha-seguridad
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo tFichaSeguridad con:
              - Un texto llamado inspector.
              - Un número real llamado puntaje.
              - Un valor booleano llamado aprobada.

              Declara dentro del bloque principal una variable llamada ficha1 de tipo tFichaSeguridad.
            answer: |
              type
                tFichaSeguridad = record
                  inspector: string;
                  puntaje: real;
                  aprobada: boolean;
                end record
              end type

              algorithm
                var
                  ficha1: tFichaSeguridad;
                end var
              end algorithm
            hint: El record agrupa campos de distintos tipos en un solo dato.

          - id: c-4-atraccion-restricciones
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 30.
              
              Crea un tipo enumerado tDificultad con los valores BAJA, MEDIA y ALTA.
              Crea un tipo tRestriccion con:
              - Un número decimal llamado alturaMinima.
              - Un valor lógico llamado embarazadasProhibido.

              Crea un tipo tAtraccion con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 30).
              - Un campo llamado dificultad de tipo tDificultad.
              - Un campo llamado restriccion de tipo tRestriccion.

              
              Declara dentro de main una variable llamada atraccion1 de tipo tAtraccion.
            answer: |
              #include <stdbool.h>

              #define MAX_NOMBRE 30

              typedef enum {
                  BAJA, MEDIA, ALTA
              } tDificultad;

              typedef struct {
                  float alturaMinima;
                  bool embarazadasProhibido;
              } tRestriccion;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tDificultad dificultad;
                  tRestriccion restriccion;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  return 0;
              }
            hint: Declara enum y structs con typedef y en ese orden antes de main.

          - id: p-4-atraccion-restricciones
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo enumerado tDificultad con los valores BAJA, MEDIA y ALTA.
              Crea un tipo tRestriccion con:
              - Un número real llamado alturaMinima.
              - Un valor booleano llamado embarazadasProhibido.

              Crea un tipo tAtraccion con:
              - Un texto llamado nombre.
              - Un campo llamado dificultad de tipo tDificultad.
              - Un campo llamado restriccion de tipo tRestriccion.

              Declara dentro del bloque principal una variable llamada atraccion1 de tipo tAtraccion.
            answer: |
              type
                tDificultad = { BAJA, MEDIA, ALTA }
              
                tRestriccion = record
                  alturaMinima: real;
                  embarazadasProhibido: boolean;
                end record
              
                tAtraccion = record
                  nombre: string;
                  dificultad: tDificultad;
                  restriccion: tRestriccion;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var
              end algorithm
            hint:
              "Define los tipos en orden: enum, record restricción y luego el record atracción. Utiliza un solo bloque type end type."

          - id: c-4-cartelera-atracciones
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20) y MAX_ATRACCIONES (3).
              
              Crea un tipo tAtraccion con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 20).
              - Un número entero llamado duracionMinutos.
              
              Declara dentro de main un array llamado cartelera de tipo tAtraccion con MAX_ATRACCIONES elementos.
            answer: |
              #define MAX_NOMBRE 20
              #define MAX_ATRACCIONES 3

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  int duracionMinutos;
              } tAtraccion;

              int main() {
                  tAtraccion cartelera[MAX_ATRACCIONES];
                  return 0;
              }
            hint: El array de structs se declara como cualquier array, usando el tipo tAtraccion.

          - id: p-4-cartelera-atracciones
            language: Pseudocode
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20) y MAX_ATRACCIONES (3).
              
              Crea un tipo tAtraccion con:
              - Un texto llamado nombre.
              - Un número entero llamado duracionMinutos.

              Declara dentro del bloque principal un array llamado cartelera de tipo tAtraccion con MAX_ATRACCIONES elementos.
            answer: |
              const
                MAX_ATRACCIONES: integer = 3;
              end const

              type
                tAtraccion = record
                  nombre: string;
                  duracionMinutos: integer;
                end record
              end type

              algorithm
                var
                  cartelera: vector[MAX_ATRACCIONES] of tAtraccion;
                end var
              end algorithm
            hint: En pseudocódigo los arrays se declaran con vector[tamaño] of tipo.

          - id: c-4-mapa-zona
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (25), FILAS (2) y COLUMNAS (3).
              
              Crea un tipo tMapaZona con:
              - Una cadena de caracteres llamada nombreZona con tamaño máximo definido por MAX_NOMBRE (valor 25).
              - Una matriz booleana llamada ocupacion con tamaño FILAS x COLUMNAS.

              Declara dentro de main una variable llamada mapa1 de tipo tMapaZona.
            answer: |
              #include <stdbool.h>

              #define MAX_NOMBRE 25
              #define FILAS 2
              #define COLUMNAS 3

              typedef struct {
                  char nombreZona[MAX_NOMBRE];
                  bool ocupacion[FILAS][COLUMNAS];
              } tMapaZona;

              int main() {
                  tMapaZona mapa1;
                  return 0;
              }
            hint: Para usar bool en C incluye <stdbool.h>. La matriz va como campo del struct.

          - id: p-4-mapa-zona
            language: Pseudocode
            week: 4
            prompt: |
              Declara las constantes FILAS con valor 2 y COLUMNAS con valor 3.
              
              Crea un tipo tMapaZona con:
              - Un texto llamado nombreZona.
              - Una matriz booleana llamada ocupacion de tamaño FILAS x COLUMNAS.
              
              Declara dentro del bloque principal una variable llamada mapa1 de tipo tMapaZona.
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 3;
              end const

              type
                tMapaZona = record
                  nombreZona: string;
                  ocupacion: vector[FILAS][COLUMNAS] of boolean;
                end record
              end type

              algorithm
                var
                  mapa1: tMapaZona;
                end var
              end algorithm
            hint: En pseudocódigo, las matrices se representan como vector[FILAS][COLUMNAS] of tipo.

          - id: c-4-snack-categoria
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 20.
              
              Crea un tipo tSnack con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 20).
              - Un carácter llamado categoria (por ejemplo 'A', 'B', 'C').

              Declara dentro de main una variable llamada snack1 de tipo tSnack.
            answer: |
              #define MAX_NOMBRE 20

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  char categoria;
              } tSnack;

              int main() {
                  tSnack snack1;
                  return 0;
              }
            hint: Recuerda que un carácter en C es tipo char y ocupa un solo carácter.

          - id: p-4-snack-categoria
            language: Pseudocode
            week: 4
            prompt: |
              Crea un tipo tSnack con:
              - Un texto llamado nombre.
              - Un carácter llamado categoria.

              Declara dentro del bloque principal una variable llamada snack1 de tipo tSnack.
            answer: |
              type
                tSnack = record
                  nombre: string;
                  categoria: character;
                end record
              end type

              algorithm
                var
                  snack1: tSnack;
                end var
              end algorithm
            hint: El campo categoria es de tipo character (un único símbolo).

          - id: c-4-puesto-precios
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (25) y NUM_PLATOS (4).
              
              Crea un tipo tPuestoComida con:
              - Una cadena de caracteres llamada nombre con tamaño máximo definido por MAX_NOMBRE (valor 25).
              - Un array de números decimales llamado precios con tamaño NUM_PLATOS.

              Declara dentro de main una variable llamada puesto1 de tipo tPuestoComida.
            answer: |
              #define MAX_NOMBRE 25
              #define NUM_PLATOS 4

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  float precios[NUM_PLATOS];
              } tPuestoComida;

              int main() {
                  tPuestoComida puesto1;
                  return 0;
              }
            hint: Declara las constantes antes del typedef; el array precios es de longitud fija.

          - id: p-4-puesto-precios
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante NUM_PLATOS con valor 4.
              
              Crea un tipo tPuestoComida con:
              - Un texto llamado nombre.
              - Un array de números reales llamado precios con tamaño NUM_PLATOS.

              Declara dentro del bloque principal una variable llamada puesto1 de tipo tPuestoComida.
            answer: |
              const
                NUM_PLATOS: integer = 4;
              end const

              type
                tPuestoComida = record
                  nombre: string;
                  precios: vector[NUM_PLATOS] of real;
                end record
              end type

              algorithm
                var
                  puesto1: tPuestoComida;
                end var
              end algorithm
            hint: En pseudocódigo usa vector[NUM_PLATOS] of real para el campo precios.


      - number: 2
        explanation:
          C: |
            En este nivel aprenderás a declarar, inicializar y acceder a estructuras (`struct`) en C, usando ejemplos relacionados con atracciones de parques.
            
            Una estructura (`struct`) te permite agrupar distintos datos bajo un mismo nombre. Por ejemplo, para representar una atracción con un nombre, tipo y duración, puedes crear una estructura como esta:
            
            ```c
            typedef struct {
                char nombre[30];
                int tipo;
                int duracion;
            } tAtraccion;
            ```
            
            Aquí se definen tres campos: una cadena de caracteres (`nombre`), un número entero (`tipo`) y otro entero (`duracion`).
            
            Para declarar una variable del tipo `tAtraccion` y asignarle valores puedes hacerlo de dos formas:
            
            **1. Declarar y asignar manualmente:**
            
            ```c
            tAtraccion a;
            
            strncpy(a.nombre, "Montaña Rusa", 30);
            a.tipo = 1;
            a.duracion = 5;
            ```
            
            **2. Declarar e inicializar con llaves:**
            
            ```c
            tAtraccion a = { "Torre de Caída", 2, 3 };
            ```
            
            Para acceder a un campo de una estructura se usa el operador punto (`.`). Por ejemplo:
            
            ```c
            printf("Nombre: %s\n", a.nombre);
            printf("Duración: %d minutos\n", a.duracion);
            ```
            
            También puedes crear arrays de estructuras:
            
            ```c
            tAtraccion parque[2];
            
            strncpy(parque[0].nombre, "Noria", 30);
            parque[0].tipo = 3;
            parque[0].duracion = 4;
            
            strncpy(parque[1].nombre, "Montaña Rusa", 30);
            parque[1].tipo = 1;
            parque[1].duracion = 5;
            ```
            
            Para acceder a campos individuales del array se usa el índice seguido del punto:
            
            ```c
            printf("Nombre primera atracción: %s\n", parque[0].nombre);
            ```

          Pseudocode: |
            En pseudocódigo también puedes usar estructuras (`record`) para agrupar diferentes datos de una misma entidad. Por ejemplo, una atracción del parque puede tener un nombre, un tipo y una duración:
            
            ```pseudocode
            type
              tAtraccion = record
                nombre: string;
                tipo: integer;
                duracion: integer;
              end record
            end type
            ```
            
            Para declarar una variable de tipo `tAtraccion` y asignar sus valores:
            
            ```pseudocode
            algorithm
              var
                a: tAtraccion;
              end var
            
              a.nombre := "Montaña Rusa";
              a.tipo := 1;
              a.duracion := 5;
            end algorithm
            ```
            
            Para acceder a los campos de una estructura se usa el punto (`.`), igual que en C:
            
            ```pseudocode
            writeString(a.nombre);
            writeInteger(a.duracion);
            ```
            
            También puedes declarar arrays de estructuras:
            
            ```pseudocode
            algorithm
              var
                parque: vector[2] of tAtraccion;
              end var
            
              parque[1].nombre := "Noria";
              parque[1].tipo := 3;
              parque[1].duracion := 4;
            
              parque[2].nombre := "Torre de Caída";
              parque[2].tipo := 2;
              parque[2].duracion := 3;
            
              writeString(parque[1].nombre);
              writeInteger(parque[1].duracion);
            end algorithm
            ```
        questions:
          # Semana 4 — Nivel 2 (Structs: declarar + inicializar + acceder/manipular)

          - id: c-4-atraccion-inicializa-imprime
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 30.

              Declara el tipo tAtraccion con los campos exactos:
              - nombre: cadena de caracteres de tamaño MAX_NOMBRE
              - alturaMinima: número decimal
              - enMantenimiento: booleano

              Dentro de main, declara la variable atraccion1 de tipo tAtraccion e inicializa:
              - nombre = "Cometa"
              - alturaMinima = 1.20
              - enMantenimiento = false

              Imprime dos líneas:
              - "Nombre: x"
              - "Altura mínima: x" (Con dos decimales)
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              #include <string.h>

              #define MAX_NOMBRE 30

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  float alturaMinima;
                  bool enMantenimiento;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  strncpy(atraccion1.nombre, "Cometa", MAX_NOMBRE);
                  atraccion1.alturaMinima = 1.20;
                  atraccion1.enMantenimiento = false;

                  printf("Nombre: %s\n", atraccion1.nombre);
                  printf("Altura mínima: %.2f\n", atraccion1.alturaMinima);
                  return 0;
              }
            hint: Usa strncpy para copiar al campo nombre y printf en líneas separadas.

          - id: p-4-atraccion-inicializa-imprime
            language: Pseudocode
            week: 4
            prompt: |
              Declara el tipo tAtraccion con los campos exactos:
              - nombre: texto
              - alturaMinima: real
              - enMantenimiento: booleano

              En el bloque principal, declara la variable atraccion1 de tipo tAtraccion e inicializa:
              - nombre := "Cometa"
              - alturaMinima := 1.20
              - enMantenimiento := false

              Imprime dos líneas:
              - "Nombre: x"
              - "Altura mínima: x"
            answer: |
              type
                tAtraccion = record
                  nombre: string;
                  alturaMinima: real;
                  enMantenimiento: boolean;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var

                atraccion1.nombre := "Cometa";
                atraccion1.alturaMinima := 1.20;
                atraccion1.enMantenimiento := false;

                writeString("Nombre: ");
                writeString(atraccion1.nombre);
                writeString("Altura mínima: ");
                writeReal(atraccion1.alturaMinima);
              end algorithm
            hint: Cada operación en su propia línea.

          - id: c-4-atraccion-con-enum-imprime
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 25.

              Declara un tipo enumerado tTipoAtraccion con los valores RUEDA, BARCA y SIMULADOR.
              
              Declara el tipo tAtraccion con:
              - nombre: cadena de caracteres de tamaño MAX_NOMBRE
              - tipo: tTipoAtraccion

              Dentro de main, declara la variable atraccion1 de tipo tAtraccion e inicializa:
              - nombre = "Rueda Panorámica"
              - tipo = RUEDA

              Imprime una sola línea con el formato "Tipo: x" mostrando Rueda, Barca o Simulador en texto.
              
              Debes mapear el enum a string utilizando if else if.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 25

              typedef enum { RUEDA, BARCA, SIMULADOR } tTipoAtraccion;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tTipoAtraccion tipo;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  strncpy(atraccion1.nombre, "Rueda Panorámica", MAX_NOMBRE);
                  atraccion1.tipo = RUEDA;

                  if (atraccion1.tipo == RUEDA) {
                      printf("Tipo: Rueda\n");
                  } else if (atraccion1.tipo == BARCA) {
                      printf("Tipo: Barca\n");
                  } else {
                      printf("Tipo: Simulador\n");
                  }
                  return 0;
              }
            hint: Hay 3 posibles casos en los que deberás imprimir el mensaje usando if else if.

          - id: p-4-atraccion-con-enum
            language: Pseudocode
            week: 4
            prompt: |
              Declara el tipo enumerado tTipoAtraccion con los valores RUEDA, BARCA y SIMULADOR.
              Declara el tipo tAtraccion con:
              - nombre: texto
              - tipo: tTipoAtraccion

              En el bloque principal, declara la variable atraccion1 de tipo tAtraccion e inicializa:
              - nombre := "Rueda Panorámica"
              - tipo := RUEDA

              Imprime dos líneas:
              - "Nombre: x"
              - "Tipo: x" (imprime el valor del enumerado tal cual)
            answer: |
              type
                tTipoAtraccion = { RUEDA, BARCA, SIMULADOR }
              end type

              type
                tAtraccion = record
                  nombre: string;
                  tipo: tTipoAtraccion;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var

                atraccion1.nombre := "Rueda Panorámica";
                atraccion1.tipo := RUEDA;

                writeString("Nombre: ");
                writeString(atraccion1.nombre);
                writeString("Tipo: ");
                writeEnum(atraccion1.tipo);
              end algorithm
            hint: Usa writeEnum para mostrar el enumerado.

          - id: c-4-atraccion-horario-inicializa
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (30) y MAX_HORA (6).

              Declara tHorario con:
              - apertura: cadena de tamaño MAX_HORA
              - cierre: cadena de tamaño MAX_HORA

              Declara tAtraccion con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - horario: tHorario

              Dentro de main, declara atraccion1 e inicializa:
              - nombre = "Dragón"
              - horario - apertura = "10:00"
              - horario - cierre = "19:30"

              Imprime: "Cierra a: x"
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 30
              #define MAX_HORA 6

              typedef struct {
                  char apertura[MAX_HORA];
                  char cierre[MAX_HORA];
              } tHorario;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tHorario horario;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  strncpy(atraccion1.nombre, "Dragón", MAX_NOMBRE);
                  strncpy(atraccion1.horario.apertura, "10:00", MAX_HORA);
                  strncpy(atraccion1.horario.cierre, "19:30", MAX_HORA);

                  printf("Cierra a: %s\n", atraccion1.horario.cierre);
                  return 0;
              }
            hint: Usa strncpy con el tamaño adecuado para cada campo.

          - id: p-4-atraccion-horario-inicializa
            language: Pseudocode
            week: 4
            prompt: |
              Declara tHorario con:
              - apertura: texto
              - cierre: texto

              Declara tAtraccion con:
              - nombre: texto
              - horario: tHorario

              En el bloque principal, declara atraccion1 e inicializa:
              - nombre := "Dragón"
              - horario - apertura := "10:00"
              - horario - cierre := "19:30"

              Imprime: "Cierra a: x"
            answer: |
              type
                tHorario = record
                  apertura: string;
                  cierre: string;
                end record

                tAtraccion = record
                  nombre: string;
                  horario: tHorario;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                end var

                atraccion1.nombre := "Dragón";
                atraccion1.horario.apertura := "10:00";
                atraccion1.horario.cierre := "19:30";

                writeString("Cierra a: ");
                writeString(atraccion1.horario.cierre);
              end algorithm
            hint: Accede a campos anidados con punto.

          - id: c-4-array-atracciones-suma-capacidad
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20) y MAX_ATRACCIONES (2).

              Declara tAtraccion con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - capacidadMaxima: entero

              Dentro de main, declara lista (array de tAtraccion con MAX_ATRACCIONES) e inicializa:
              - lista 0 - nombre = "Lanza" y lista 0 - capacidadMaxima = 12
              - lista 1 - nombre = "Náutica" y lista 1 - capacidadMaxima = 8

              Declara totalCapacidad (entero) y guarda la suma de ambas capacidades. 
              
              Imprime "Total: x".
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 20
              #define MAX_ATRACCIONES 2

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  int capacidadMaxima;
              } tAtraccion;

              int main() {
                  tAtraccion lista[MAX_ATRACCIONES];

                  strncpy(lista[0].nombre, "Lanza", MAX_NOMBRE);
                  lista[0].capacidadMaxima = 12;

                  strncpy(lista[1].nombre, "Náutica", MAX_NOMBRE);
                  lista[1].capacidadMaxima = 8;

                  int totalCapacidad = lista[0].capacidadMaxima + lista[1].capacidadMaxima;
                  printf("Total: %d\n", totalCapacidad);
                  return 0;
              }
            hint: Suma campos enteros y muestra el resultado.

          - id: p-4-array-atracciones-suma-capacidad
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 2.

              Declara tAtraccion con:
              - nombre: texto
              - capacidadMaxima: entero

              En el bloque principal, declara lista (vector[MAX_ATRACCIONES] de tAtraccion) e inicializa:
              - lista 0 - nombre = "Lanza" y lista 0 - capacidadMaxima = 12
              - lista 1 - nombre = "Náutica"; lista 1 - capacidadMaxima = 8

              Declara totalCapacidad (entero) como la suma de ambas capacidades. 
              
              Imprime "Total: x".
            answer: |
              const
                MAX_ATRACCIONES: integer = 2;
              end const

              type
                tAtraccion = record
                  nombre: string;
                  capacidadMaxima: integer;
                end record
              end type

              algorithm
                var
                  lista: vector[MAX_ATRACCIONES] of tAtraccion;
                  totalCapacidad: integer;
                end var

                lista[1].nombre := "Lanza";
                lista[1].capacidadMaxima := 12;
                lista[2].nombre := "Náutica";
                lista[2].capacidadMaxima := 8;

                totalCapacidad := lista[1].capacidadMaxima + lista[2].capacidadMaxima;

                writeString("Total: ");
                writeInteger(totalCapacidad);
              end algorithm
            hint: Índices desde 1 en pseudocódigo.

          - id: c-4-precios-promedio
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (25) y NUM_PRECIOS (3).

              Declara tPuestoComida con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - precios: array de decimales de tamaño NUM_PRECIOS

              Dentro de main, declara puesto1 e inicializa:
              - nombre = "Taco Loco"
              - precios = (3.5, 4.0, 2.5)

              Calcula el promedio en la variable promedio (decimal) e imprime "Promedio: x" con un decimal.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 25
              #define NUM_PRECIOS 3

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  float precios[NUM_PRECIOS];
              } tPuestoComida;

              int main() {
                  tPuestoComida puesto1;
                  strncpy(puesto1.nombre, "Taco Loco", MAX_NOMBRE);
                  puesto1.precios[0] = 3.5;
                  puesto1.precios[1] = 4.0;
                  puesto1.precios[2] = 2.5;

                  float promedio = (puesto1.precios[0] + puesto1.precios[1] + puesto1.precios[2]) / 3;
                  printf("Promedio: %.1f\n", promedio);
                  return 0;
              }
            hint: El promedio se calcula con la suma de todos los precios dividido entre 3. Utiliza paréntesis en la suma.

          - id: p-4-precios-promedio
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante NUM_PRECIOS con valor 3.

              Declara tPuestoComida con:
              - nombre: texto
              - precios: vector[NUM_PRECIOS] de reales

              En el bloque principal, declara puesto1 e inicializa:
              - nombre = "Taco Loco"
              - precios = (3.5, 4.0, 2.5)

              Calcula promedio (real) como la media de los tres precios e imprime "Promedio: x".
            answer: |
              const
                NUM_PRECIOS: integer = 3;
              end const

              type
                tPuestoComida = record
                  nombre: string;
                  precios: vector[NUM_PRECIOS] of real;
                end record
              end type

              algorithm
                var
                  puesto1: tPuestoComida;
                  promedio: real;
                end var

                puesto1.nombre := "Taco Loco";
                puesto1.precios[1] := 3.5;
                puesto1.precios[2] := 4.0;
                puesto1.precios[3] := 2.5;

                promedio := (puesto1.precios[1] + puesto1.precios[2] + puesto1.precios[3]) / 3;

                writeString("Promedio: ");
                writeReal(promedio);
              end algorithm
            hint: Una sentencia por línea.

          - id: c-4-ficha-booleano-ternario
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 30.

              Declara tFichaSeguridad con:
              - inspector: cadena de tamaño MAX_NOMBRE
              - puntaje: decimal
              - aprobada: booleano

              Dentro de main, declara ficha1 e inicializa:
              - inspector = "María"
              - puntaje = 8.7
              - aprobada = true

              Imprime "Estado: Aprobada" si aprobada es true, o "Estado: Rechazada" si es false usando operador ternario.
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              #include <string.h>

              #define MAX_NOMBRE 30

              typedef struct {
                  char inspector[MAX_NOMBRE];
                  float puntaje;
                  bool aprobada;
              } tFichaSeguridad;

              int main() {
                  tFichaSeguridad ficha1;
                  strncpy(ficha1.inspector, "María", MAX_NOMBRE);
                  ficha1.puntaje = 8.7;
                  ficha1.aprobada = true;

                  printf("Estado: %s\n", ficha1.aprobada ? "Aprobada" : "Rechazada");
                  return 0;
              }
            hint: Este ejercicio usa ternario.

          - id: p-4-ficha-booleano
            language: Pseudocode
            week: 4
            prompt: |
              Declara tFichaSeguridad con:
              - inspector: texto
              - puntaje: real
              - aprobada: booleano

              En el bloque principal, declara ficha1 e inicializa:
              - inspector := "María"
              - puntaje := 8.7
              - aprobada := true

              Imprime:
              - "Inspector: x"
              - "Aprobada: x" (true o false)
            answer: |
              type
                tFichaSeguridad = record
                  inspector: string;
                  puntaje: real;
                  aprobada: boolean;
                end record
              end type

              algorithm
                var
                  ficha1: tFichaSeguridad;
                end var

                ficha1.inspector := "María";
                ficha1.puntaje := 8.7;
                ficha1.aprobada := true;

                writeString("Inspector: ");
                writeString(ficha1.inspector);
                writeString("Aprobada: ");
                writeBoolean(ficha1.aprobada);
              end algorithm
            hint: No hay operador ternario en pseudocódigo.

          - id: c-4-mapa-ocupacion-contar
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20), FILAS (2) y COLUMNAS (2).

              Declara tMapaZona con:
              - nombreZona: cadena de tamaño MAX_NOMBRE
              - ocupacion: matriz booleana de tamaño FILAS x COLUMNAS

              En main, declara mapa1 e inicializa:
              - nombreZona = "Zona A"
              - ocupacion 0-0 = true
              - ocupacion 0-1 = false
              - ocupacion 1-0 = true
              - ocupacion 1-1 = true

              Declara ocupadas (entero), inicializa en 0 y cuenta cuántas casillas true hay con if y sumas ++ (sin bucles ni operador ternario). 
              
              Imprime "Ocupadas: x".
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              #include <string.h>

              #define MAX_NOMBRE 20
              #define FILAS 2
              #define COLUMNAS 2

              typedef struct {
                  char nombreZona[MAX_NOMBRE];
                  bool ocupacion[FILAS][COLUMNAS];
              } tMapaZona;

              int main() {
                  tMapaZona mapa1;
                  strncpy(mapa1.nombreZona, "Zona A", MAX_NOMBRE);
                  mapa1.ocupacion[0][0] = true;
                  mapa1.ocupacion[0][1] = false;
                  mapa1.ocupacion[1][0] = true;
                  mapa1.ocupacion[1][1] = true;

                  int ocupadas = 0;
                  if (mapa1.ocupacion[0][0]) { 
                    ocupadas++; 
                  }
                  if (mapa1.ocupacion[0][1]) { 
                    ocupadas++; 
                  }
                  if (mapa1.ocupacion[1][0]) { 
                    ocupadas++; 
                  }
                  if (mapa1.ocupacion[1][1]) { 
                    ocupadas++; 
                  }

                  printf("Ocupadas: %d\n", ocupadas);
                  return 0;
              }
            hint: Usa if y acumulación con ++; no uses operador ternario.

          - id: p-4-mapa-ocupacion-contar
            language: Pseudocode
            week: 4
            prompt: |
              Declara las constantes FILAS (2) y COLUMNAS (2).

              Declara tMapaZona con:
              - nombreZona: texto
              - ocupacion: matriz booleana FILAS x COLUMNAS

              En el bloque principal, declara mapa1 e inicializa:
              - nombreZona = "Zona A"
              - ocupacion 0-0 = true
              - ocupacion 0-1 = false
              - ocupacion 1-0 = true
              - ocupacion 1-1 = true

              Declara ocupadas (entero), inicializa en 0 y cuenta cuántas casillas true hay con if (sin bucles). 
              
              Imprime "Ocupadas: x".
            answer: |
              const
                FILAS: integer = 2;
                COLUMNAS: integer = 2;
              end const

              type
                tMapaZona = record
                  nombreZona: string;
                  ocupacion: vector[FILAS][COLUMNAS] of boolean;
                end record
              end type

              algorithm
                var
                  mapa1: tMapaZona;
                  ocupadas: integer;
                end var

                mapa1.nombreZona := "Zona A";
                mapa1.ocupacion[1][1] := true;
                mapa1.ocupacion[1][2] := false;
                mapa1.ocupacion[2][1] := true;
                mapa1.ocupacion[2][2] := true;

                ocupadas := 0;
                if mapa1.ocupacion[1][1] = true then
                  ocupadas := ocupadas + 1;
                end if
                if mapa1.ocupacion[1][2] = true then
                  ocupadas := ocupadas + 1;
                end if
                if mapa1.ocupacion[2][1] = true then
                  ocupadas := ocupadas + 1;
                end if
                if mapa1.ocupacion[2][2] = true then
                  ocupadas := ocupadas + 1;
                end if

                writeString("Ocupadas: ");
                writeInteger(ocupadas);
              end algorithm
            hint: |
              Forma correcta del if en pseudocódigo: if … then / end if.

          - id: c-4-atraccion-dificultad-a-texto
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 20.

              Declara tDificultad con valores BAJA, MEDIA y ALTA.
              
              Declara tAtraccion con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - dificultad: tDificultad

              Dentro de main, declara atraccion1 e inicializa:
              - nombre = "Vértigo"
              - dificultad = ALTA

              Declara tipoStr (cadena de tamaño 10) y copia "Baja", "Media" o "Alta" según la dificultad de la atracción usando if/else. Imprime "Dif: x".
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 20

              typedef enum { BAJA, MEDIA, ALTA } tDificultad;

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tDificultad dificultad;
              } tAtraccion;

              int main() {
                  tAtraccion atraccion1;
                  strncpy(atraccion1.nombre, "Vértigo", MAX_NOMBRE);
                  atraccion1.dificultad = ALTA;

                  char tipoStr[10];
                  if (atraccion1.dificultad == BAJA) {
                      strncpy(tipoStr, "Baja", 10);
                  } else if (atraccion1.dificultad == MEDIA) {
                      strncpy(tipoStr, "Media", 10);
                  } else {
                      strncpy(tipoStr, "Alta", 10);
                  }

                  printf("Dif: %s\n", tipoStr);
                  return 0;
              }
            hint: Usa if/else para seleccionar la cadena y strncpy para copiarla.

          - id: p-4-atraccion-dificultad-texto
            language: Pseudocode
            week: 4
            prompt: |
              Declara tDificultad con valores BAJA, MEDIA y ALTA.
              Declara tAtraccion con:
              - nombre: texto
              - dificultad: tDificultad

              En el bloque principal, declara atraccion1 e inicializa:
              - nombre := "Vértigo"
              - dificultad := ALTA

              Declara tipoStr (texto) y asígnale:
              - "Baja" si la dificultad es BAJA, "Media" si es MEDIA, o "Alta" si es ALTA.
              Imprime "Dif: x".
            answer: |
              type
                tDificultad = { BAJA, MEDIA, ALTA }
              end type

              type
                tAtraccion = record
                  nombre: string;
                  dificultad: tDificultad;
                end record
              end type

              algorithm
                var
                  atraccion1: tAtraccion;
                  tipoStr: string;
                end var

                atraccion1.nombre := "Vértigo";
                atraccion1.dificultad := ALTA;

                if atraccion1.dificultad = BAJA then
                  tipoStr := "Baja";
                else
                  if atraccion1.dificultad = MEDIA then
                    tipoStr := "Media";
                  else
                      tipoStr := "Alta";
                  end if
                end if

                writeString("Dif: ");
                writeString(tipoStr);
              end algorithm
            hint: Un if por caso también es válido en pseudocódigo.

          - id: c-4-precio-mayor
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20) y NUM_PRECIOS (3).

              Declara tPuestoComida con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - precios: array de decimales de tamaño NUM_PRECIOS

              En main, declara puesto1 e inicializa:
              - nombre = "Papas Xpress"
              - precios = (2.5, 3.0, 1.8)

              Declara mayor (decimal) y calcula el mayor de los tres precios usando comparaciones e if (sin bucles ni operador ternario). Imprime "Mayor: x" con un decimal.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 20
              #define NUM_PRECIOS 3

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  float precios[NUM_PRECIOS];
              } tPuestoComida;

              int main() {
                  tPuestoComida puesto1;
                  strncpy(puesto1.nombre, "Papas Xpress", MAX_NOMBRE);
                  puesto1.precios[0] = 2.5;
                  puesto1.precios[1] = 3.0;
                  puesto1.precios[2] = 1.8;

                  float mayor = puesto1.precios[0];
                  if (puesto1.precios[1] > mayor) { 
                    mayor = puesto1.precios[1]; 
                  }
                  if (puesto1.precios[2] > mayor) { 
                    mayor = puesto1.precios[2]; 
                  }

                  printf("Mayor: %.1f\n", mayor);
                  return 0;
              }
            hint: Actualiza mayor si encuentras un valor superior.

          - id: p-4-precio-mayor
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante NUM_PRECIOS (3).

              Declara tPuestoComida con:
              - nombre: texto
              - precios: vector[NUM_PRECIOS] de reales

              En el bloque principal, declara puesto1 e inicializa:
              - puesto1.nombre := "Papas Xpress"
              - puesto1.precios[1] := 2.5
              - puesto1.precios[2] := 3.0
              - puesto1.precios[3] := 1.8

              Declara mayor (real) y calcula el mayor de los tres precios con comparaciones (sin bucles). Imprime "Mayor: x".
            answer: |
              const
                NUM_PRECIOS: integer = 3;
              end const

              type
                tPuestoComida = record
                  nombre: string;
                  precios: vector[NUM_PRECIOS] of real;
                end record
              end type

              algorithm
                var
                  puesto1: tPuestoComida;
                  mayor: real;
                end var

                puesto1.nombre := "Papas Xpress";
                puesto1.precios[1] := 2.5;
                puesto1.precios[2] := 3.0;
                puesto1.precios[3] := 1.8;

                mayor := puesto1.precios[1];
                if puesto1.precios[2] > mayor then
                  mayor := puesto1.precios[2];
                end if
                if puesto1.precios[3] > mayor then
                  mayor := puesto1.precios[3];
                end if

                writeString("Mayor: ");
                writeReal(mayor);
              end algorithm
            hint: Una sentencia por línea; if con then / end if.

          - id: c-4-cartelera-inicializa-imprime-primera
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_NOMBRE (20) y MAX_ATRACCIONES (2).

              Declara tAtraccion con:
              - nombre: cadena de tamaño MAX_NOMBRE
              - duracionMinutos: entero

              En main, declara cartelera (array de tAtraccion con MAX_ATRACCIONES) e inicializa:
              - cartelera 0 - nombre = "Fantasmagoría" y cartelera 0 - duracionMinutos = 7
              - cartelera 1 - nombre = "Aqua Rush" y cartelera 1 - duracionMinutos = 12

              Imprime una línea con el formato: "Primera: x (y min)" mostrando el nombre y la duración de la primera atracción.
            answer: |
              #include <stdio.h>
              #include <string.h>

              #define MAX_NOMBRE 20
              #define MAX_ATRACCIONES 2

              typedef struct {
                  char nombre[MAX_NOMBRE];
                  int duracionMinutos;
              } tAtraccion;

              int main() {
                  tAtraccion cartelera[MAX_ATRACCIONES];

                  strncpy(cartelera[0].nombre, "Fantasmagoría", MAX_NOMBRE);
                  cartelera[0].duracionMinutos = 7;

                  strncpy(cartelera[1].nombre, "Aqua Rush", MAX_NOMBRE);
                  cartelera[1].duracionMinutos = 12;

                  printf("Primera: %s (%d min)\n", cartelera[0].nombre, cartelera[0].duracionMinutos);
                  return 0;
              }
            hint: Recuerda usar strncpy para los nombres.

          - id: p-4-cartelera-inicializa-imprime-primera
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 2.

              Declara tAtraccion con:
              - nombre: texto
              - duracionMinutos: entero

              En el bloque principal, declara cartelera (vector de MAX_ATRACCIONES) e inicializa:
              - cartelera 0 - nombre = "Fantasmagoría" y cartelera 0 - duracionMinutos = 7
              - cartelera 1 - nombre = "Aqua Rush" y cartelera 1 - duracionMinutos = 12

              Imprime una línea con el formato: "Primera: x (y min)" mostrando el nombre y duración de la primera atracción.
            answer: |
              const
                MAX_ATRACCIONES: integer = 2;
              end const

              type
                tAtraccion = record
                  nombre: string;
                  duracionMinutos: integer;
                end record
              end type

              algorithm
                var
                  cartelera: vector[MAX_ATRACCIONES] of tAtraccion;
                end var

                cartelera[1].nombre := "Fantasmagoría";
                cartelera[1].duracionMinutos := 7;
                cartelera[2].nombre := "Aqua Rush";
                cartelera[2].duracionMinutos := 12;

                writeString("Primera: ");
                writeString(cartelera[1].nombre);
                writeString(" (");
                writeInteger(cartelera[1].duracionMinutos);
                writeString(" min)");
              end algorithm
            hint: En pseudocódigo imprimimos por partes, cada llamada en su línea.


      - number: 3
        explanation:
        questions:
          - id: c-4-l3-registro-basico-for
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 3 y MAX_NOMBRE con valor 20.
              
              Crea un tipo enumerado llamado tTipoAtraccion con los valores MONTANA_RUSA, CARRUSEL y SIMULADOR.
              
              Crea un tipo tAtraccion con los campos exactos:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              - tipo: de tipo tTipoAtraccion.
              - duracionMinutos: número entero.
              
              Dentro de la función principal, declara un array llamado atracciones de tipo tAtraccion con MAX_ATRACCIONES elementos y una variable entera llamada i.
              
              Recorre el array con un bucle for y, en cada iteración, pide al usuario:
              - el nombre (muestra "Nombre: ") y guarda el texto en el campo de nombre de la atracción actual,
              - el tipo (muestra "Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): ") y guarda el valor en el campo de tipo,
              - la duración en minutos (muestra "Duración (min): ") y guarda el número en el campo correspondiente.
              
              Al final, muestra por pantalla el nombre de la primera atracción en su propia línea.
            answer: |
              #include <stdio.h>
              
              #define MAX_ATRACCIONES 3
              #define MAX_NOMBRE 20
              
              typedef enum {
                  MONTANA_RUSA,
                  CARRUSEL,
                  SIMULADOR
              } tTipoAtraccion;
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tTipoAtraccion tipo;
                  int duracionMinutos;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i;
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      printf("Nombre: ");
                      scanf("%s", atracciones[i].nombre);
                      printf("Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): ");
                      scanf("%u", &atracciones[i].tipo);
                      printf("Duración (min): ");
                      scanf("%d", &atracciones[i].duracionMinutos);
                  }
              
                  printf("%s\n", atracciones[0].nombre);
                  return 0;
              }
            hint: |
              Limita la lectura del nombre con %19s (si MAX_NOMBRE es 20).

          - id: p-4-l3-registro-basico-for
            language: Pseudocode
            week: 4
            prompt: |
              Tema Parque de Atracciones.
              
              Declara la constante MAX_ATRACCIONES con valor 3.
              
              Crea un tipo enumerado llamado tTipoAtraccion con los valores MONTANA_RUSA, CARRUSEL y SIMULADOR.
              
              Crea un tipo tAtraccion con los campos exactos:
              - nombre: texto.
              - tipo: de tipo tTipoAtraccion.
              - duracionMinutos: número entero.
              
              En el bloque principal, declara un array llamado atracciones de tipo tAtraccion con MAX_ATRACCIONES elementos y una variable entera i.
              
              Recorre el array con un bucle for (de 1 a MAX_ATRACCIONES) y, en cada iteración, pide al usuario:
              - el nombre (muestra "Nombre: ") y guarda el texto en el campo de nombre de la atracción actual,
              - el tipo (muestra "Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): "); lee un número auxiliar y asígnalo al campo de tipo mediante un switch,
              - la duración en minutos (muestra "Duración (min): ") y guarda el número en el campo correspondiente.
              
              Al final, muestra el nombre de la primera atracción en su propia línea.
            answer: |
              const
                MAX_ATRACCIONES: integer = 3;
              end const
              
              type
                tTipoAtraccion = { MONTANA_RUSA, CARRUSEL, SIMULADOR };
              end type
              
              type
                tAtraccion = record
                  nombre: string;
                  tipo: tTipoAtraccion;
                  duracionMinutos: integer;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                  auxTipo: integer;
                end var
              
                for i := 1 to MAX_ATRACCIONES do
                  writeString("Nombre: ");
                  atracciones[i].nombre := readString();
              
                  writeString("Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): ");
                  atracciones[i].tipo := readEnum();

                  writeString("Duración (min): ");
                  atracciones[i].duracionMinutos := readInteger();
                end for
              
                writeString(atracciones[1].nombre);
              end algorithm
            hint: |
              En pseudocodigo contamos con la funcion readEnum();

          - id: c-4-l3-suma-duraciones-while
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 3 y MAX_NOMBRE con valor 15.
              
              Define el tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              - duracionMinutos: número entero.
              
              En la función principal, declara un array atracciones de tipo tAtraccion. Asigna manualmente las duraciones 10, 15 y 20 a sus tres elementos.
              Declara una variable entera i y otra llamada totalDuracion inicializada a 0. Usando un bucle while, recorre el array y acumula en totalDuracion
              la suma de las duraciones. Al terminar, imprime en una línea: "Total: x".
            answer: |
              #include <stdio.h>
              
              #define MAX_ATRACCIONES 3
              #define MAX_NOMBRE 15
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
                  int duracionMinutos;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i = 0;
                  int totalDuracion = 0;
              
                  atracciones[0].duracionMinutos = 10;
                  atracciones[1].duracionMinutos = 15;
                  atracciones[2].duracionMinutos = 20;
              
                  while(i < MAX_ATRACCIONES) {
                      totalDuracion += atracciones[i].duracionMinutos;
                      i++;
                  }
              
                  printf("Total: %d\n", totalDuracion);
                  return 0;
              }
            hint: |
              Inicializa i en 0 antes del while.

          - id: p-4-l3-suma-duraciones-while
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 3.
              
              Define el tipo tAtraccion con:
              - nombre: texto.
              - duracionMinutos: número entero.
              
              En el bloque principal, declara un array atracciones de tipo tAtraccion. Asigna manualmente a sus tres elementos las duraciones 10, 15 y 20.
              Declara una variable i e inicialízala a 1, y otra llamada totalDuracion con valor 0. Recorre el array con un bucle while sumando las duraciones
              en totalDuracion. Al final, escribe "Total: " y en la línea siguiente el valor acumulado.
            answer: |
              const
                MAX_ATRACCIONES: integer = 3;
              end const
              
              type
                tAtraccion = record
                  nombre: string;
                  duracionMinutos: integer;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                  totalDuracion: integer;
                end var
              
                atracciones[1].duracionMinutos := 10;
                atracciones[2].duracionMinutos := 15;
                atracciones[3].duracionMinutos := 20;
              
                i := 1;
                totalDuracion := 0;
                while i <= MAX_ATRACCIONES do
                  totalDuracion := totalDuracion + atracciones[i].duracionMinutos;
                  i := i + 1;
                end while
              
                writeString("Total: ");
                writeInteger(totalDuracion);
              end algorithm
            hint: |
              En pseudocódigo los índices de arrays empiezan en 1.

          - id: c-4-l3-menu-switch-do-while
            language: C
            week: 4
            prompt: |
              Declara un tipo enumerado tTipoAtraccion con los valores MONTANA_RUSA, CARRUSEL y SIMULADOR.
              
              En la función principal, crea un menú dentro de un bucle do-while:
              - Pide una opción entera mostrando "Opción (1=MONTANA_RUSA,2=CARRUSEL,3=SIMULADOR,0=Salir): ".
              - Con un switch, muestra exactamente una de estas líneas según la opción:
                "Montaña rusa", "Carrusel", "Simulador", "Saliendo..." o "Inválida".
              
              El bucle termina cuando la opción sea 0.
            answer: |
              #include <stdio.h>
              
              typedef enum {
                  MONTANA_RUSA,
                  CARRUSEL,
                  SIMULADOR
              } tTipoAtraccion;
              
              int main() {
                  int opcion;
                  do {
                      printf("Opción (1=MONTANA_RUSA,2=CARRUSEL,3=SIMULADOR,0=Salir): ");
                      scanf("%d", &opcion);
              
                      switch(opcion) {
                          case 1: 
                            printf("Montaña rusa\n"); 
                            break;
                          case 2: 
                            printf("Carrusel\n"); 
                            break;
                          case 3: 
                            printf("Simulador\n"); 
                            break;
                          case 0: 
                            printf("Saliendo...\n"); 
                            break;
                          default: 
                            printf("Inválida\n");
                      }
                  } while(opcion != 0);
                  return 0;
              }
            hint: |
              do-while ejecuta el cuerpo al menos una vez.

          - id: p-4-l3-menu-switch-do-while
            language: Pseudocode
            week: 4
            prompt: |
              Crea un menú en un bucle do-while:
              - Pide una opción entera mostrando "Opción (1=Montaña rusa,2=Carrusel,3=Simulador,0=Salir): ".
              - Con un switch, muestra exactamente una de estas líneas:
                "Montaña rusa", "Carrusel", "Simulador", "Saliendo..." o "Inválida".
              
              El bucle termina cuando la opción sea 0.
            answer: |
              algorithm
                var
                  opcion: integer;
                end var
              
                do
                  writeString("Opción (1=Montaña rusa,2=Carrusel,3=Simulador,0=Salir): ");
                  opcion := readInteger();
              
                  switch opcion
                    case 1 then
                      writeString("Montaña rusa");
                    end case
                    case 2 then
                      writeString("Carrusel");
                    end case
                    case 3 then
                      writeString("Simulador");
                    end case
                    case 0 then
                      writeString("Saliendo...");
                    end case
                    case default then
                      writeString("Inválida");
                    end case
                  end switch
                while opcion <> 0;
              end algorithm
            hint: |
              La condición del do-while va después del bloque.

          - id: c-4-l3-strcmp-dos-atracciones
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_NOMBRE con valor 25.
              
              Define el tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              
              En la función main, declara dos variables a1 y a2 de tipo tAtraccion. Pide al usuario dos nombres:
              - muestra "Nombre 1: " y guarda el texto en el nombre de a1,
              - muestra "Nombre 2: " y guarda el texto en el nombre de a2.
              
              Compara ambos nombres y muestra "Iguales" si son exactamente iguales, o "Diferentes" en caso contrario.
            answer: |
              #include <stdio.h>
              #include <string.h>
              
              #define MAX_NOMBRE 25
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
              } tAtraccion;
              
              int main() {
                  tAtraccion a1, a2;
              
                  printf("Nombre 1: ");
                  scanf("%s", a1.nombre);
                  printf("Nombre 2: ");
                  scanf("%s", a2.nombre);
              
                  if(strcmp(a1.nombre, a2.nombre) == 0) {
                      printf("Iguales\n");
                  } else {
                      printf("Diferentes\n");
                  }
              
                  return 0;
              }
            hint: |
              strcmp devuelve 0 si las cadenas son iguales.

          - id: p-4-l3-compara-nombres-simple
            language: Pseudocode
            week: 4
            prompt: |
              Define el tipo tAtraccion con:
              - nombre: texto.
              
              En el bloque principal, declara a1 y a2 de tipo tAtraccion. Pide al usuario dos nombres:
              - muestra "Nombre 1: " y guarda el texto en el nombre de a1,
              - muestra "Nombre 2: " y guarda el texto en el nombre de a2.
              
              Si ambos nombres son iguales, muestra "Iguales"; en caso contrario, muestra "Diferentes".
            answer: |
              type
                tAtraccion = record
                  nombre: string;
                end record
              end type
              
              algorithm
                var
                  a1: tAtraccion;
                  a2: tAtraccion;
                end var
              
                writeString("Nombre 1: ");
                a1.nombre := readString();
                writeString("Nombre 2: ");
                a2.nombre := readString();
              
                if a1.nombre = a2.nombre then
                  writeString("Iguales");
                else
                  writeString("Diferentes");
                end if
              end algorithm
            hint: |
              La comparación de textos se realiza con = y <>.

          - id: c-4-l3-horarios-for
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 2, MAX_NOMBRE con valor 20 y MAX_HORA con valor 6.
              
              Crea un tipo tHorario con:
              - apertura: texto con tamaño máximo MAX_HORA.
              - cierre: texto con tamaño máximo MAX_HORA.
              
              Crea un tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              - horario: de tipo tHorario.
              
              En la función principal, declara un array atracciones de tipo tAtraccion y una variable entera i.
              Recorre el array con un bucle for y para cada elemento pide al usuario:
              - el nombre (muestra "Nombre: "),
              - la hora de apertura (muestra "Apertura: "),
              - la hora de cierre (muestra "Cierre: ").
              
              Al finalizar, muestra en una línea la hora de cierre de la segunda atracción.
            answer: |
              #include <stdio.h>
              
              #define MAX_ATRACCIONES 2
              #define MAX_NOMBRE 20
              #define MAX_HORA 6
              
              typedef struct {
                  char apertura[MAX_HORA];
                  char cierre[MAX_HORA];
              } tHorario;
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tHorario horario;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i;
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      printf("Nombre: ");
                      scanf("%s", atracciones[i].nombre);
                      printf("Apertura: ");
                      scanf("%s", atracciones[i].horario.apertura);
                      printf("Cierre: ");
                      scanf("%s", atracciones[i].horario.cierre);
                  }
                  printf("%s\n", atracciones[1].horario.cierre);
                  return 0;
              }
            hint: |
              Respeta el orden del enunciado para declarar los datos

          - id: p-4-l3-horarios-for
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 2.
              
              Crea un tipo tHorario con:
              - apertura: texto.
              - cierre: texto.
              
              Crea un tipo tAtraccion con:
              - nombre: texto.
              - horario: de tipo tHorario.
              
              En el bloque principal, declara un array atracciones de tipo tAtraccion y una variable entera i.
              Recorre el array con un bucle for (de 1 a MAX_ATRACCIONES) y para cada elemento pide al usuario:
              - el nombre (muestra "Nombre: "),
              - la hora de apertura (muestra "Apertura: "),
              - la hora de cierre (muestra "Cierre: ").
              
              Al finalizar, muestra en una línea la hora de cierre de la segunda atracción.
            answer: |
              const
                MAX_ATRACCIONES: integer = 2;
              end const
              
              type
                tHorario = record
                  apertura: string;
                  cierre: string;
                end record
              end type
              
              type
                tAtraccion = record
                  nombre: string;
                  horario: tHorario;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                end var
              
                for i := 1 to MAX_ATRACCIONES do
                  writeString("Nombre: ");
                  atracciones[i].nombre := readString();
                  writeString("Apertura: ");
                  atracciones[i].horario.apertura := readString();
                  writeString("Cierre: ");
                  atracciones[i].horario.cierre := readString();
                end for
              
                writeString(atracciones[2].horario.cierre);
              end algorithm
            hint: |
              Un campo puede ser otro record anidado.

          - id: c-4-l3-contar-mantenimiento-for
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 4 y MAX_NOMBRE con valor 20.
              
              Crea un tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              - enMantenimiento: valor lógico.
              
              En la función principal, declara un array atracciones de tipo tAtraccion, una variable entera i y otra entera contador inicializada a 0.
              Recorre el array con un bucle for. Para cada posición, pide al usuario:
              - el nombre (muestra "Nombre: ") y guárdalo en el campo de nombre,
              - si está en mantenimiento (muestra "¿En mantenimiento? (1 sí / 0 no): "); lee un número y conviértelo a valor lógico para el campo enMantenimiento.
              
              Luego, con otro bucle for, cuenta cuántas atracciones tienen enMantenimiento verdadero y muestra en una línea: "En mantenimiento: x".
            answer: |
              #include <stdio.h>
              #include <stdbool.h>
              
              #define MAX_ATRACCIONES 4
              #define MAX_NOMBRE 20
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
                  bool enMantenimiento;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i, contador = 0;
                  int temp;
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      printf("Nombre: ");
                      scanf("%s", atracciones[i].nombre);
                      printf("¿En mantenimiento? (1 sí / 0 no): ");
                      scanf("%d", &temp);
                      atracciones[i].enMantenimiento = (temp != 0);
                  }
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      if(atracciones[i].enMantenimiento) {
                          contador++;
                      }
                  }
              
                  printf("En mantenimiento: %d\n", contador);
                  return 0;
              }
            hint: |
              Lee 0/1 y asigna al bool con una comparación.

          - id: p-4-l3-contar-mantenimiento-for
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 4.
              
              Crea un tipo tAtraccion con:
              - nombre: texto.
              - enMantenimiento: valor booleano.
              
              En el bloque principal, declara un array atracciones de tipo tAtraccion, una variable entera i, una entera contador (inicial 0) y una booleana temp.
              Recorre el array con un bucle for y, para cada posición, pide:
              - el nombre (muestra "Nombre: ") y guárdalo en el campo de nombre,
              - si está en mantenimiento (muestra "¿En mantenimiento? (true/false): "); lee el valor en temp y asígnalo al campo enMantenimiento.
              
              Después, con otro for, cuenta cuántas atracciones tienen enMantenimiento verdadero y escribe:
              "En mantenimiento: " y, en la línea siguiente, el número contado.
            answer: |
              const
                MAX_ATRACCIONES: integer = 4;
              end const
              
              type
                tAtraccion = record
                  nombre: string;
                  enMantenimiento: boolean;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                  contador: integer;
                  temp: boolean;
                end var
              
                for i := 1 to MAX_ATRACCIONES do
                  writeString("Nombre: ");
                  atracciones[i].nombre := readString();
                  writeString("¿En mantenimiento? (true/false): ");
                  atracciones[i].enMantenimiento := readBoolean();
                end for
              
                contador := 0;
                for i := 1 to MAX_ATRACCIONES do
                  if atracciones[i].enMantenimiento then
                    contador := contador + 1;
                  end if
                end for
              
                writeString("En mantenimiento: ");
                writeInteger(contador);
              end algorithm
            hint: |
              Una sentencia por línea en pseudocódigo.

          - id: c-4-l3-switch-por-tipo
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 3 y MAX_NOMBRE con valor 18.
              
              Declara el tipo enumerado tTipoAtraccion con MONTANA_RUSA, CARRUSEL y SIMULADOR.
              Declara el tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              - tipo: de tipo tTipoAtraccion.
              
              En la función principal, lee los datos de tres atracciones usando un bucle for (nombre y tipo numérico 0..2).
              Después recorre el array con un bucle for y, para cada atracción, muestra exactamente una línea con el texto del tipo:
              "Montaña rusa", "Carrusel" o "Simulador". Usa un switch para decidir el texto.
            answer: |
              #include <stdio.h>
              
              #define MAX_ATRACCIONES 3
              #define MAX_NOMBRE 18
              
              typedef enum {
                  MONTANA_RUSA,
                  CARRUSEL,
                  SIMULADOR
              } tTipoAtraccion;
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
                  tTipoAtraccion tipo;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i;
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      printf("Nombre: ");
                      scanf("%s", atracciones[i].nombre);
                      printf("Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): ");
                      scanf("%u", &atracciones[i].tipo;
                      
                  }
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      switch(atracciones[i].tipo) {
                          case MONTANA_RUSA: 
                              printf("Montaña rusa\n"); 
                              break;
                          case CARRUSEL:     
                              printf("Carrusel\n");     
                              break;
                          case SIMULADOR:    
                              printf("Simulador\n");    
                              break;
                          default:           
                              printf("Desconocido\n");
                      }
                  }
                  return 0;
              }
            hint: |
              Un switch por cada elemento del array.

          - id: p-4-l3-switch-por-tipo
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 3.
              
              Declara el tipo enumerado tTipoAtraccion con MONTANA_RUSA, CARRUSEL y SIMULADOR.
              Declara el tipo tAtraccion con:
              - nombre: texto.
              - tipo: de tipo tTipoAtraccion.
              
              En el bloque principal, pide al usuario los datos de tres atracciones con un bucle (nombre y un número 0..2 para el tipo; usa un switch para asignarlo).
              Recorre el array con un bucle for y, para cada atracción, muestra exactamente una línea con el texto del tipo:
              "Montaña rusa", "Carrusel" o "Simulador".
            answer: |
              const
                MAX_ATRACCIONES: integer = 3;
              end const
              
              type
                tTipoAtraccion = { MONTANA_RUSA, CARRUSEL, SIMULADOR };
              end type
              
              type
                tAtraccion = record
                  nombre: string;
                  tipo: tTipoAtraccion;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                end var
              
                for i := 1 to MAX_ATRACCIONES do
                  writeString("Nombre: ");
                  atracciones[i].nombre := readString();
                  writeString("Tipo (0=MONTANA_RUSA,1=CARRUSEL,2=SIMULADOR): ");
                  atracciones[i].tipo := readEnum();
                end for
              
                for i := 1 to MAX_ATRACCIONES do
                  switch atracciones[i].tipo
                    case MONTANA_RUSA then
                      writeString("Montaña rusa");
                    end case
                    case CARRUSEL then
                      writeString("Carrusel");
                    end case
                    case SIMULADOR then
                      writeString("Simulador");
                    end case
                    case default then
                      writeString("Desconocido");
                    end case
                  end switch
                end for
              end algorithm
            hint: |
              Mantén una sola salida por línea.

          - id: c-4-l3-entrada-hasta-fin-strcmp
            language: C
            week: 4
            prompt: |
              Declara las constantes MAX_ATRACCIONES con valor 4 y MAX_NOMBRE con valor 20.
              
              Define el tipo tAtraccion con:
              - nombre: texto con tamaño máximo MAX_NOMBRE.
              
              En la función principal, declara un array atracciones de tipo tAtraccion, un búfer temporal llamado tempNombre (texto de tamaño MAX_NOMBRE) y una variable entera i inicializada a 0.
              
              Usa un bucle while y repite mientras haya espacio disponible ( i menor que MAX_ATRACCIONES):
              - pide un nombre mostrando "Nombre (FIN para terminar): " y guárdalo en el búfer temporal,
              - si el usuario escribe la palabra FIN, detén la repetición (Usando break para detener el bucle),
              - en caso contrario (No uses else), copia el contenido del búfer temporal al campo de nombre del siguiente elemento y avanza al siguiente índice.
              
              Al terminar, muestra en una línea "Guardados: x" con la cantidad de elementos almacenados.
            answer: |
              #include <stdio.h>
              #include <string.h>
              
              #define MAX_ATRACCIONES 4
              #define MAX_NOMBRE 20
              
              typedef struct {
                  char nombre[MAX_NOMBRE];
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  char tempNombre[MAX_NOMBRE];
                  int i = 0;
              
                  while(i < MAX_ATRACCIONES) {
                      printf("Nombre (FIN para terminar): ");
                      scanf("%s", tempNombre);
                      if(strcmp(tempNombre, "FIN") == 0) {
                          break;
                      }
                      strncpy(atracciones[i].nombre, tempNombre, MAX_NOMBRE);
                      i++;
                  }
              
                  printf("Guardados: %d\n", i);
                  return 0;
              }
            hint: |
              Usa strcmp para comparar con "FIN" y strncpy para copiar.

          - id: p-4-l3-entrada-hasta-vacio
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 4.
              
              Define el tipo tAtraccion con:
              - nombre: texto.
              
              En el bloque principal, declara un array atracciones de tipo tAtraccion, una variable de texto tempNombre y una entera i inicializada a 1.
              
              Mientras no se supere el límite y el usuario no escriba "FIN":
              - pide un nombre mostrando "Nombre (FIN para terminar): " y guárdalo en tempNombre,
              - si no es "FIN", guarda el texto en el nombre del siguiente elemento del array y avanza al siguiente índice.
              
              Al terminar, muestra "Guardados: " y, en la línea siguiente, la cantidad de elementos realmente guardados.
            answer: |
              const
                MAX_ATRACCIONES: integer = 4;
              end const
              
              type
                tAtraccion = record
                  nombre: string;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  tempNombre: string;
                  i: integer;
                end var
              
                i := 1;
                tempNombre := "";
                while (i <= MAX_ATRACCIONES and tempNombre <> "FIN") do
                  writeString("Nombre (FIN para terminar): ");
                  tempNombre := readString();
                  if tempNombre <> "FIN" then
                    atracciones[i].nombre := tempNombre;
                    i := i + 1;
                  end if
                end while
              
                writeString("Guardados: ");
                writeInteger(i - 1);
              end algorithm
            hint: |
              Controla fin por palabra y por límite.

          - id: c-4-l3-promedio-y-ternario
            language: C
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 3.
              
              Define el tipo tAtraccion con:
              - duracionMinutos: número entero.
              
              En la función principal, declara un array atracciones de tipo tAtraccion, una variable entera i , otra llamada suma con valor inicial 0 y un float promedio.
              Con un bucle for, pide al usuario tres duraciones mostrando "Duración (min): " y guarda cada valor en el campo de duración del elemento actual, acumulándolo en suma.
              
              Calcula el promedio como un número decimal dividiendo la suma entre 3 (Castea a float) y muestra:
              - en una línea: "Promedio: x.x" (con un decimal),
              - en la siguiente línea, usa un operador ternario para imprimir "Larga" si el promedio es mayor o igual que 120, o "Corta" en caso contrario.
            answer: |
              #include <stdio.h>
              
              #define MAX_ATRACCIONES 3
              
              typedef struct {
                  int duracionMinutos;
              } tAtraccion;
              
              int main() {
                  tAtraccion atracciones[MAX_ATRACCIONES];
                  int i;
                  suma = 0;
                  float promedio;
              
                  for(i = 0; i < MAX_ATRACCIONES; i++) {
                      printf("Duración (min): ");
                      scanf("%d", &atracciones[i].duracionMinutos);
                      suma += atracciones[i].duracionMinutos;
                  }
              
                  promedio = suma / (float)3;
                  printf("Promedio: %.1f\n", promedio);
                  printf("%s\n", (promedio >= 120.0) ? "Larga" : "Corta");
                  return 0;
              }
            hint: |
              Recuerda castear a (float) el numero 3 en la division

          - id: p-4-l3-promedio-simple
            language: Pseudocode
            week: 4
            prompt: |
              Declara la constante MAX_ATRACCIONES con valor 3.
              
              Define el tipo tAtraccion con:
              - duracionMinutos: número entero.
              
              En el bloque principal, declara un array atracciones de tipo tAtraccion, una variable entera i, otra entera suma y otra real promedio.
              Con un bucle for, pide al usuario tres duraciones mostrando "Duración (min): " y guarda cada valor en el campo de duración del elemento actual, acumulándolo en suma.
              
              Calcula el promedio como número real dividiendo suma entre 3 (Casteando a real) y muestra:
              - en una línea: "Promedio: "
              - en la línea siguiente, el valor del promedio.
            answer: |
              const
                MAX_ATRACCIONES: integer = 3;
              end const
              
              type
                tAtraccion = record
                  duracionMinutos: integer;
                end record
              end type
              
              algorithm
                var
                  atracciones: vector[MAX_ATRACCIONES] of tAtraccion;
                  i: integer;
                  suma: integer;
                  promedio: real;
                end var
              
                suma := 0;
                for i := 1 to MAX_ATRACCIONES do
                  writeString("Duración (min): ");
                  atracciones[i].duracionMinutos := readInteger();
                  suma := suma + atracciones[i].duracionMinutos;
                end for
              
                promedio := suma / integerToReal(3);
                writeString("Promedio: ");
                writeReal(promedio);
              end algorithm
            hint: |
              Una sentencia por línea; no hay operador ternario en pseudocódigo.









